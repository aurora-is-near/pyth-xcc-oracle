{
  "address": "0xB95e6a65dA43a7f4f26bFD5dD7c2631cBF3fb31a",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ptr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct Borsh.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "decodePromiseResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum PromiseResultStatus",
              "name": "status",
              "type": "PromiseResultStatus"
            },
            {
              "internalType": "bytes",
              "name": "output",
              "type": "bytes"
            }
          ],
          "internalType": "struct PromiseResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ExecutionMode",
          "name": "mode",
          "type": "ExecutionMode"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PromiseArgsVariant",
          "name": "mode",
          "type": "PromiseArgsVariant"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetAccountId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "uint128",
              "name": "nearBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "nearGas",
              "type": "uint64"
            }
          ],
          "internalType": "struct PromiseCreateArgs",
          "name": "nearPromise",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "base",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "callback",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromiseWithCallback",
          "name": "nearPromise",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "base",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "callback",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromiseWithCallback",
          "name": "nearPromise",
          "type": "tuple"
        },
        {
          "internalType": "enum ExecutionMode",
          "name": "mode",
          "type": "ExecutionMode"
        }
      ],
      "name": "encodeCrossContractCallArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetAccountId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "uint128",
              "name": "nearBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "nearGas",
              "type": "uint64"
            }
          ],
          "internalType": "struct PromiseCreateArgs",
          "name": "nearPromise",
          "type": "tuple"
        },
        {
          "internalType": "enum ExecutionMode",
          "name": "mode",
          "type": "ExecutionMode"
        }
      ],
      "name": "encodeCrossContractCallArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "v",
          "type": "uint128"
        }
      ],
      "name": "encodeU128",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "v",
          "type": "uint32"
        }
      ],
      "name": "encodeU32",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "v",
          "type": "uint64"
        }
      ],
      "name": "encodeU64",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ptr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct Borsh.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "skipPromiseResult",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bc7724c85fee44b7c1eb5ea28125e379d32f06d886d8b84eef2ce97300b011a",
  "receipt": {
    "to": null,
    "from": "0xCDD8c6b04044A3FA9Ba0500C469500CfCb66F0fC",
    "contractAddress": "0xB95e6a65dA43a7f4f26bFD5dD7c2631cBF3fb31a",
    "transactionIndex": 0,
    "gasUsed": "790333",
    "logsBloom": "0x
    "blockHash": "0x935b20131962d8e6a24501ec1732cf3a18bedfca5bd084b659d9704080eac50f",
    "transactionHash": "0x1bc7724c85fee44b7c1eb5ea28125e379d32f06d886d8b84eef2ce97300b011a",
    "logs": [],
    "blockNumber": 158202265,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c1d472e99c15a4b42bdc18ef5856dddf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct Borsh.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"decodePromiseResult\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PromiseResultStatus\",\"name\":\"status\",\"type\":\"PromiseResultStatus\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"}],\"internalType\":\"struct PromiseResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ExecutionMode\",\"name\":\"mode\",\"type\":\"ExecutionMode\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PromiseArgsVariant\",\"name\":\"mode\",\"type\":\"PromiseArgsVariant\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"nearPromise\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"callback\",\"type\":\"tuple\"}],\"internalType\":\"struct PromiseWithCallback\",\"name\":\"nearPromise\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"callback\",\"type\":\"tuple\"}],\"internalType\":\"struct PromiseWithCallback\",\"name\":\"nearPromise\",\"type\":\"tuple\"},{\"internalType\":\"enum ExecutionMode\",\"name\":\"mode\",\"type\":\"ExecutionMode\"}],\"name\":\"encodeCrossContractCallArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"nearPromise\",\"type\":\"tuple\"},{\"internalType\":\"enum ExecutionMode\",\"name\":\"mode\",\"type\":\"ExecutionMode\"}],\"name\":\"encodeCrossContractCallArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v\",\"type\":\"uint128\"}],\"name\":\"encodeU128\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"v\",\"type\":\"uint32\"}],\"name\":\"encodeU32\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"v\",\"type\":\"uint64\"}],\"name\":\"encodeU64\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct Borsh.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"skipPromiseResult\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decodePromiseResult(Borsh.Data)\":{\"notice\":\"Decode promise result using borsh.\"},\"encode(ExecutionMode)\":{\"notice\":\"Encode Execution mode enum into borsh.\"},\"encode(PromiseArgsVariant)\":{\"notice\":\"Encode PromiseArgsVariant enum into borsh.\"},\"encode(PromiseCreateArgs)\":{\"notice\":\"Encode base promise into borsh.\"},\"encode(PromiseWithCallback)\":{\"notice\":\"Encode promise with callback into borsh.\"},\"encode(bytes)\":{\"notice\":\"Encode bytes into borsh. Use this method to encode strings as well.\"},\"encodeCrossContractCallArgs(PromiseCreateArgs,ExecutionMode)\":{\"notice\":\"Encode create promise using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects.\"},\"encodeCrossContractCallArgs(PromiseWithCallback,ExecutionMode)\":{\"notice\":\"Encode promise with callback using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects.\"},\"skipPromiseResult(Borsh.Data)\":{\"notice\":\"Skip promise result from the buffer.\"}},\"notice\":\"Provide borsh serialization and deserialization for multiple types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aurora-sdk/Codec.sol\":\"Codec\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/aurora-sdk/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(data.ptr + length <= data.end, \\\"Parse error: unexpected EOI\\\");\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length) internal pure returns (bytes32 res) {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length) internal pure returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length) internal view returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data) internal pure returns (bytes memory res) {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x75147926773f187bac6b2d50fa059c63e9ed3b1296b00aad61a28d37aa32d3ef\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            encode(bytes(nearPromise.targetAccountId)),\\n            encode(bytes(nearPromise.method)),\\n            encode(nearPromise.args),\\n            encodeU128(nearPromise.nearBalance),\\n            encodeU64(nearPromise.nearGas)\\n        );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(encode(nearPromise.base), encode(nearPromise.callback));\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseCreateArgs memory nearPromise, ExecutionMode mode)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(encode(mode), encode(PromiseArgsVariant.Create), encode(nearPromise));\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseWithCallback memory nearPromise, ExecutionMode mode)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(encode(mode), encode(PromiseArgsVariant.Callback), encode(nearPromise));\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data) public pure returns (PromiseResult memory result) {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(uint8(data.decodeU8()));\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3f54af89b9beb6efda2250b3ee70a63bf04cb7c576ed0649f79faf6e4eee1c7\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant\\n/// Basic NEAR promise\\n{\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    /// See https://nomicon.io/RuntimeSpec/Components/BindingsSpec/PromisesAPI\\n    /// for a complete description of what is possible.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode\\n/// Eager mode means that the promise WILL be executed in a single\\n/// NEAR transaction.\\n{\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus\\n/// This status should not be reachable.\\n{\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xb24942bea164dd922fc3016083072d72863e0ea7b15ed9dbe582bf8423a5bb41\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8)\\n            | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16)\\n            | ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32)\\n            | ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\\n        v = ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64)\\n            | ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length) internal pure returns (bytes memory res) {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end :=\\n                    add(res, and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length) internal view returns (bytes32 res) {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0x62dd74181dd1b2e30144db30f186bd590f9a21adc1a57c23e66d93a0cca09068\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x610d5861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80635e2eab261161007b5780635e2eab261461019b5780637c8b7bce146101bb5780637d7436f5146101ce5780637f08bf97146101e3578063b1038e711461020f578063c733ea971461022257600080fd5b806308c0b37c146100c35780630a245d1b146101165780630acbdd891461014257806312496a1b146101555780631f42468a14610175578063231be07714610188575b600080fd5b6100f86100d136600461070d565b600881811b63ff00ff001662ff00ff9290911c9190911617601081811b91901c1760e01b90565b6040516001600160e01b031990911681526020015b60405180910390f35b610129610124366004610749565b61024e565b6040516001600160f81b0319909116815260200161010d565b610129610150366004610764565b61026b565b610168610163366004610874565b61027f565b60405161010d9190610901565b610168610183366004610a71565b6102d5565b610168610196366004610abf565b61031d565b6101ae6101a9366004610af4565b610374565b60405161010d9190610b3c565b6101686101c9366004610b81565b6103fd565b6101e16101dc366004610af4565b61042a565b005b6101f66101f1366004610bb6565b610471565b6040516001600160c01b0319909116815260200161010d565b61016861021d366004610bd1565b6104db565b610235610230366004610c07565b6104f9565b6040516001600160801b0319909116815260200161010d565b600081600181111561026257610262610b26565b60f81b92915050565b600081600281111561026257610262610b26565b60606102ad8251600881811b63ff00ff001662ff00ff9290911c9190911617601081811b91901c1760e01b90565b826040516020016102bf929190610c22565b6040516020818303038152906040529050919050565b60606102e08261024e565b6102ea600161026b565b6102f3856103fd565b60405160200161030593929190610c53565b60405160208183030381529060405290505b92915050565b606061032c826000015161027f565b610339836020015161027f565b610346846040015161027f565b61035385606001516104f9565b6103608660800151610471565b6040516020016102bf959493929190610c8d565b60408051808201909152600081526060602082015261039282610598565b60ff1660028111156103a6576103a6610b26565b819060028111156103b9576103b9610b26565b908160028111156103cc576103cc610b26565b9052506001815160028111156103e4576103e4610b26565b036103f8576103f2826105ae565b60208201525b919050565b606061040c826000015161031d565b610419836020015161031d565b6040516020016102bf929190610cf3565b600061043582610598565b60ff16600281111561044957610449610b26565b9050600181600281111561045f5761045f610b26565b0361046d5761046d826105ee565b5050565b600066ff000000ff0000600883811c91821667ff000000ff0000009185901b91821617601090811c64ff000000ff9390931665ff000000ff009290921691909117901b17602081811c63ffffffff1691901b6bffffffffffffffff00000000161760c01b92915050565b60606104e68261024e565b6104f0600061026b565b6102f38561031d565b6dff000000ff000000ff000000ff00600882811b9182166cff000000ff000000ff000000ff9390911c92831617601090811b6fff000000ff000000ff000000ff000000929092166eff000000ff000000ff000000ff0000939093169290921790911c17602081811b6fffffffff00000000ffffffff00000000166bffffffff00000000ffffffff9290911c9190911617604081811b91901c1760801b90565b60006105a582600161061b565b60f81c92915050565b606060006105bb83610634565b63ffffffff1690506105d6818461066a90919063ffffffff16565b82516105e290826106c5565b83519091019092525090565b60006105f982610634565b63ffffffff169050610614818361066a90919063ffffffff16565b8151019052565b6000610627838361066a565b5081518051910190915290565b600061031761064483600461061b565b60e881901c62ff00ff1663ff00ff0060d89290921c9190911617601081811c91901b1790565b602082015182518201111561046d5760405162461bcd60e51b815260206004820152601b60248201527f5061727365206572726f723a20756e657870656374656420454f490000000000604482015260640160405180910390fd5b60608115610317576040519050601f19603f830116810180604052828252602082015b8451815260208101905081810315610705576020850194506106e8565b505092915050565b60006020828403121561071f57600080fd5b813563ffffffff8116811461073357600080fd5b9392505050565b8035600281106103f857600080fd5b60006020828403121561075b57600080fd5b6107338261073a565b60006020828403121561077657600080fd5b81356003811061073357600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156107be576107be610785565b60405290565b6040805190810167ffffffffffffffff811182821017156107be576107be610785565b600082601f8301126107f857600080fd5b813567ffffffffffffffff8082111561081357610813610785565b604051601f8301601f19908116603f0116810190828211818310171561083b5761083b610785565b8160405283815286602085880101111561085457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561088657600080fd5b813567ffffffffffffffff81111561089d57600080fd5b6108a9848285016107e7565b949350505050565b60005b838110156108cc5781810151838201526020016108b4565b50506000910152565b600081518084526108ed8160208601602086016108b1565b601f01601f19169290920160200192915050565b60208152600061073360208301846108d5565b80356fffffffffffffffffffffffffffffffff811681146103f857600080fd5b803567ffffffffffffffff811681146103f857600080fd5b600060a0828403121561095e57600080fd5b61096661079b565b9050813567ffffffffffffffff8082111561098057600080fd5b61098c858386016107e7565b835260208401359150808211156109a257600080fd5b6109ae858386016107e7565b602084015260408401359150808211156109c757600080fd5b506109d4848285016107e7565b6040830152506109e660608301610914565b60608201526109f760808301610934565b608082015292915050565b600060408284031215610a1457600080fd5b610a1c6107c4565b9050813567ffffffffffffffff80821115610a3657600080fd5b610a428583860161094c565b83526020840135915080821115610a5857600080fd5b50610a658482850161094c565b60208301525092915050565b60008060408385031215610a8457600080fd5b823567ffffffffffffffff811115610a9b57600080fd5b610aa785828601610a02565b925050610ab66020840161073a565b90509250929050565b600060208284031215610ad157600080fd5b813567ffffffffffffffff811115610ae857600080fd5b6108a98482850161094c565b600060408284031215610b0657600080fd5b610b0e6107c4565b82358152602083013560208201528091505092915050565b634e487b7160e01b600052602160045260246000fd5b602081526000825160038110610b6257634e487b7160e01b600052602160045260246000fd5b8060208401525060208301516040808401526108a960608401826108d5565b600060208284031215610b9357600080fd5b813567ffffffffffffffff811115610baa57600080fd5b6108a984828501610a02565b600060208284031215610bc857600080fd5b61073382610934565b60008060408385031215610be457600080fd5b823567ffffffffffffffff811115610bfb57600080fd5b610aa78582860161094c565b600060208284031215610c1957600080fd5b61073382610914565b6001600160e01b0319831681528151600090610c458160048501602087016108b1565b919091016004019392505050565b6001600160f81b03198481168252831660018201528151600090610c7e8160028501602087016108b1565b91909101600201949350505050565b60008651610c9f818460208b016108b1565b865190830190610cb3818360208b016108b1565b8651910190610cc6818360208a016108b1565b6001600160801b031995909516940193845250506001600160c01b03191660108201526018019392505050565b60008351610d058184602088016108b1565b835190830190610d198183602088016108b1565b0194935050505056fea264697066735822122068c21cdf5824f234c6cf6351208c93f6bda01892ac14a77ac8227813895c7bef64736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80635e2eab261161007b5780635e2eab261461019b5780637c8b7bce146101bb5780637d7436f5146101ce5780637f08bf97146101e3578063b1038e711461020f578063c733ea971461022257600080fd5b806308c0b37c146100c35780630a245d1b146101165780630acbdd891461014257806312496a1b146101555780631f42468a14610175578063231be07714610188575b600080fd5b6100f86100d136600461070d565b600881811b63ff00ff001662ff00ff9290911c9190911617601081811b91901c1760e01b90565b6040516001600160e01b031990911681526020015b60405180910390f35b610129610124366004610749565b61024e565b6040516001600160f81b0319909116815260200161010d565b610129610150366004610764565b61026b565b610168610163366004610874565b61027f565b60405161010d9190610901565b610168610183366004610a71565b6102d5565b610168610196366004610abf565b61031d565b6101ae6101a9366004610af4565b610374565b60405161010d9190610b3c565b6101686101c9366004610b81565b6103fd565b6101e16101dc366004610af4565b61042a565b005b6101f66101f1366004610bb6565b610471565b6040516001600160c01b0319909116815260200161010d565b61016861021d366004610bd1565b6104db565b610235610230366004610c07565b6104f9565b6040516001600160801b0319909116815260200161010d565b600081600181111561026257610262610b26565b60f81b92915050565b600081600281111561026257610262610b26565b60606102ad8251600881811b63ff00ff001662ff00ff9290911c9190911617601081811b91901c1760e01b90565b826040516020016102bf929190610c22565b6040516020818303038152906040529050919050565b60606102e08261024e565b6102ea600161026b565b6102f3856103fd565b60405160200161030593929190610c53565b60405160208183030381529060405290505b92915050565b606061032c826000015161027f565b610339836020015161027f565b610346846040015161027f565b61035385606001516104f9565b6103608660800151610471565b6040516020016102bf959493929190610c8d565b60408051808201909152600081526060602082015261039282610598565b60ff1660028111156103a6576103a6610b26565b819060028111156103b9576103b9610b26565b908160028111156103cc576103cc610b26565b9052506001815160028111156103e4576103e4610b26565b036103f8576103f2826105ae565b60208201525b919050565b606061040c826000015161031d565b610419836020015161031d565b6040516020016102bf929190610cf3565b600061043582610598565b60ff16600281111561044957610449610b26565b9050600181600281111561045f5761045f610b26565b0361046d5761046d826105ee565b5050565b600066ff000000ff0000600883811c91821667ff000000ff0000009185901b91821617601090811c64ff000000ff9390931665ff000000ff009290921691909117901b17602081811c63ffffffff1691901b6bffffffffffffffff00000000161760c01b92915050565b60606104e68261024e565b6104f0600061026b565b6102f38561031d565b6dff000000ff000000ff000000ff00600882811b9182166cff000000ff000000ff000000ff9390911c92831617601090811b6fff000000ff000000ff000000ff000000929092166eff000000ff000000ff000000ff0000939093169290921790911c17602081811b6fffffffff00000000ffffffff00000000166bffffffff00000000ffffffff9290911c9190911617604081811b91901c1760801b90565b60006105a582600161061b565b60f81c92915050565b606060006105bb83610634565b63ffffffff1690506105d6818461066a90919063ffffffff16565b82516105e290826106c5565b83519091019092525090565b60006105f982610634565b63ffffffff169050610614818361066a90919063ffffffff16565b8151019052565b6000610627838361066a565b5081518051910190915290565b600061031761064483600461061b565b60e881901c62ff00ff1663ff00ff0060d89290921c9190911617601081811c91901b1790565b602082015182518201111561046d5760405162461bcd60e51b815260206004820152601b60248201527f5061727365206572726f723a20756e657870656374656420454f490000000000604482015260640160405180910390fd5b60608115610317576040519050601f19603f830116810180604052828252602082015b8451815260208101905081810315610705576020850194506106e8565b505092915050565b60006020828403121561071f57600080fd5b813563ffffffff8116811461073357600080fd5b9392505050565b8035600281106103f857600080fd5b60006020828403121561075b57600080fd5b6107338261073a565b60006020828403121561077657600080fd5b81356003811061073357600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156107be576107be610785565b60405290565b6040805190810167ffffffffffffffff811182821017156107be576107be610785565b600082601f8301126107f857600080fd5b813567ffffffffffffffff8082111561081357610813610785565b604051601f8301601f19908116603f0116810190828211818310171561083b5761083b610785565b8160405283815286602085880101111561085457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561088657600080fd5b813567ffffffffffffffff81111561089d57600080fd5b6108a9848285016107e7565b949350505050565b60005b838110156108cc5781810151838201526020016108b4565b50506000910152565b600081518084526108ed8160208601602086016108b1565b601f01601f19169290920160200192915050565b60208152600061073360208301846108d5565b80356fffffffffffffffffffffffffffffffff811681146103f857600080fd5b803567ffffffffffffffff811681146103f857600080fd5b600060a0828403121561095e57600080fd5b61096661079b565b9050813567ffffffffffffffff8082111561098057600080fd5b61098c858386016107e7565b835260208401359150808211156109a257600080fd5b6109ae858386016107e7565b602084015260408401359150808211156109c757600080fd5b506109d4848285016107e7565b6040830152506109e660608301610914565b60608201526109f760808301610934565b608082015292915050565b600060408284031215610a1457600080fd5b610a1c6107c4565b9050813567ffffffffffffffff80821115610a3657600080fd5b610a428583860161094c565b83526020840135915080821115610a5857600080fd5b50610a658482850161094c565b60208301525092915050565b60008060408385031215610a8457600080fd5b823567ffffffffffffffff811115610a9b57600080fd5b610aa785828601610a02565b925050610ab66020840161073a565b90509250929050565b600060208284031215610ad157600080fd5b813567ffffffffffffffff811115610ae857600080fd5b6108a98482850161094c565b600060408284031215610b0657600080fd5b610b0e6107c4565b82358152602083013560208201528091505092915050565b634e487b7160e01b600052602160045260246000fd5b602081526000825160038110610b6257634e487b7160e01b600052602160045260246000fd5b8060208401525060208301516040808401526108a960608401826108d5565b600060208284031215610b9357600080fd5b813567ffffffffffffffff811115610baa57600080fd5b6108a984828501610a02565b600060208284031215610bc857600080fd5b61073382610934565b60008060408385031215610be457600080fd5b823567ffffffffffffffff811115610bfb57600080fd5b610aa78582860161094c565b600060208284031215610c1957600080fd5b61073382610914565b6001600160e01b0319831681528151600090610c458160048501602087016108b1565b919091016004019392505050565b6001600160f81b03198481168252831660018201528151600090610c7e8160028501602087016108b1565b91909101600201949350505050565b60008651610c9f818460208b016108b1565b865190830190610cb3818360208b016108b1565b8651910190610cc6818360208a016108b1565b6001600160801b031995909516940193845250506001600160c01b03191660108201526018019392505050565b60008351610d058184602088016108b1565b835190830190610d198183602088016108b1565b0194935050505056fea264697066735822122068c21cdf5824f234c6cf6351208c93f6bda01892ac14a77ac8227813895c7bef64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decodePromiseResult(Borsh.Data)": {
        "notice": "Decode promise result using borsh."
      },
      "encode(ExecutionMode)": {
        "notice": "Encode Execution mode enum into borsh."
      },
      "encode(PromiseArgsVariant)": {
        "notice": "Encode PromiseArgsVariant enum into borsh."
      },
      "encode(PromiseCreateArgs)": {
        "notice": "Encode base promise into borsh."
      },
      "encode(PromiseWithCallback)": {
        "notice": "Encode promise with callback into borsh."
      },
      "encode(bytes)": {
        "notice": "Encode bytes into borsh. Use this method to encode strings as well."
      },
      "encodeCrossContractCallArgs(PromiseCreateArgs,ExecutionMode)": {
        "notice": "Encode create promise using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects."
      },
      "encodeCrossContractCallArgs(PromiseWithCallback,ExecutionMode)": {
        "notice": "Encode promise with callback using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects."
      },
      "skipPromiseResult(Borsh.Data)": {
        "notice": "Skip promise result from the buffer."
      }
    },
    "notice": "Provide borsh serialization and deserialization for multiple types.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}