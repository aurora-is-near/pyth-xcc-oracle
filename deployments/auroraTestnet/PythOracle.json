{
  "address": "0xeFEa485dED2ec25bAd1DBE2Cb76b548cC38A5593",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_auroraMainnetAccountId",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_wNEAR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLBACK_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auroraMainnetAccountId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "priceId",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_targetPriceDecimals",
          "type": "uint8"
        }
      ],
      "name": "getPythPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPythPriceCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "near",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "contract IERC20",
          "name": "wNEAR",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nearRepresentitiveImplicitAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNEAR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe87133e3142ea9ca9c14fbc2462e19e36c64b70ff4c4883b2ffc9ece0ad836cb",
  "receipt": {
    "to": null,
    "from": "0xCDD8c6b04044A3FA9Ba0500C469500CfCb66F0fC",
    "contractAddress": "0xeFEa485dED2ec25bAd1DBE2Cb76b548cC38A5593",
    "transactionIndex": 0,
    "gasUsed": "2769683",
    "logsBloom": "0x
    "blockHash": "0x55d5dc44c4a38154668343be9d894275cdaa324d7d9e4fd197d6b8dffff8e6ef",
    "transactionHash": "0xe87133e3142ea9ca9c14fbc2462e19e36c64b70ff4c4883b2ffc9ece0ad836cb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 157682288,
        "transactionHash": "0xe87133e3142ea9ca9c14fbc2462e19e36c64b70ff4c4883b2ffc9ece0ad836cb",
        "address": "0xeFEa485dED2ec25bAd1DBE2Cb76b548cC38A5593",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c",
          "0x0000000000000000000000003de1a10aa16bfedb031f2a81e517bb8c6b6aca0b",
          "0x000000000000000000000000cdd8c6b04044a3fa9ba0500c469500cfcb66f0fc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x55d5dc44c4a38154668343be9d894275cdaa324d7d9e4fd197d6b8dffff8e6ef"
      }
    ],
    "blockNumber": 157682288,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "aurora.testnet",
    "0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d",
    "0x74f09cb3c7e2A01865f424FD14F6dc9A14E3e94E"
  ],
  "numDeployments": 1,
  "solcInputHash": "25cceaba0c96fb8b5fe37ae60f42f738",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_auroraMainnetAccountId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wNEAR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLBACK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auroraMainnetAccountId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"priceId\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_targetPriceDecimals\",\"type\":\"uint8\"}],\"name\":\"getPythPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPythPriceCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"near\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"wNEAR\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nearRepresentitiveImplicitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNEAR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A simple oracle example deployed on an Aurora Silo which uses a Uniswap V2 pool (Trisolaris) as price feed from Aurora Mainnet. The result of the XCC call is returned in the callback from Aurora Mainnet to the Silo.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PythOracle.sol\":\"PythOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"},\"contracts/PythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AuroraSdk, Codec, NEAR, PromiseCreateArgs, PromiseResultStatus, PromiseWithCallback, Borsh} from \\\"./aurora-sdk/AuroraSdk.sol\\\";\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n\\n// When making a call to another NEAR contract, you must specify how much NEAR gas\\n// will be attached to the call (this is simlar to the `gas` argument in the EVM `call` opcode).\\n// The typical unit of has on Near is the teragas (Tgas), where 1 Tgas = 10^12 gas.\\n// For example, the block gas limit on NEAR is 1000 Tgas, and the transaction gas limit is 300 Tgas.\\nuint64 constant CALL_NEAR_GAS = 100_000_000_000_000;\\nuint64 constant CALLBACK_NEAR_GAS = 10_000_000_000_000;\\n\\n/**\\n * A simple oracle example deployed on an Aurora Silo which uses a Uniswap V2 pool (Trisolaris) as price feed from Aurora Mainnet.\\n * The result of the XCC call is returned in the callback from Aurora Mainnet to the Silo.\\n */\\ncontract PythOracle is AccessControl {\\n    using AuroraSdk for NEAR;\\n    using AuroraSdk for PromiseCreateArgs;\\n    using AuroraSdk for PromiseWithCallback;\\n    using Codec for bytes;\\n\\n    IPyth pyth;\\n    uint fee;\\n// Pyth Crypto.AURORA/USD\\t0x2f7c4f738d498585065a4b87b637069ec99474597da7f0ca349ba8ac3ba9cac5\\n\\n    bytes32 public constant CALLBACK_ROLE = keccak256(\\\"CALLBACK_ROLE\\\");\\n\\n    string public auroraMainnetAccountId;\\n    NEAR public near;\\n    address public wNEAR;\\n    address public priceFeedAddr;\\n\\n    uint256 public priceResult;\\n    uint8 targetPriceDecimals;\\n\\n    constructor(\\n        string memory _auroraMainnetAccountId,\\n        IERC20 _wNEAR,\\n        address _priceFeedAddr\\n    ) {\\n        auroraMainnetAccountId = _auroraMainnetAccountId;\\n        near = AuroraSdk.initNear(_wNEAR);\\n        wNEAR = address(_wNEAR);\\n        _grantRole(\\n            CALLBACK_ROLE,\\n            AuroraSdk.nearRepresentitiveImplicitAddress(address(this))\\n        );\\n        pyth = IPyth(_priceFeedAddr);\\n        priceFeedAddr = _priceFeedAddr;\\n    }\\n\\n    function getPythPrice(bytes memory priceId, uint8 _targetPriceDecimals) public returns (uint256) {\\n        targetPriceDecimals = _targetPriceDecimals;\\n        \\n        bytes memory txData = abi.encodeWithSignature(\\n            \\\"getPrice(bytes32)\\\",\\n            priceId\\n        );\\n        PromiseCreateArgs memory callMainnetOracle = near.call(\\n            auroraMainnetAccountId,\\n            \\\"call\\\",\\n            abi.encodePacked(\\n                uint8(0),\\n                priceFeedAddr,\\n                uint256(0),\\n                txData.encode()\\n            ),\\n            0,\\n            CALL_NEAR_GAS\\n        );\\n        PromiseCreateArgs memory callback = near.auroraCall(\\n            address(this),\\n            abi.encodePacked(this.getPythPriceCallback.selector),\\n            0,\\n            CALLBACK_NEAR_GAS\\n        );\\n\\n        callMainnetOracle.then(callback).transact();\\n        return priceResult;\\n    }\\n\\n    // This function is not meant to be called by an externally owned account (EOA) on Aurora.\\n    // It should only be invoked as a callback from the main `getPythPrice` method above. This is\\n    // the reason why this function has separate access control from `getPythPrice`.\\n    function getPythPriceCallback() public onlyRole(CALLBACK_ROLE) {\\n        if (\\n            AuroraSdk.promiseResult(0).status != PromiseResultStatus.Successful\\n        ) {\\n            revert(\\\"getPythPrice call failed-NEAR\\\");\\n        }\\n        bytes memory output = AuroraSdk.promiseResult(0).output;\\n        if (output[1] != hex\\\"00\\\") {\\n            revert(\\\"getPythPrice call failed-Aurora\\\");\\n        }\\n        bytes memory data = Borsh.decodeBytes(\\n            Borsh.from(BytesLib.slice(output, 2, output.length - 2))\\n        );\\n        PythStructs.Price memory pyhtPrice = abi.decode(data, (PythStructs.Price));\\n\\n        priceResult = convertToUint(pyhtPrice, targetPriceDecimals);\\n    }\\n\\n    function nearRepresentitiveImplicitAddress() public returns (address) {\\n        return AuroraSdk.nearRepresentitiveImplicitAddress(address(this));\\n    }\\n\\n    function convertToUint(\\n        PythStructs.Price memory price,\\n        uint8 targetDecimals\\n    ) private pure returns (uint256) {\\n        if (price.price < 0 || price.expo > 0 || price.expo < -255) {\\n            revert();\\n        }\\n\\n        uint8 priceDecimals = uint8(uint32(-1 * price.expo));\\n\\n        if (targetDecimals >= priceDecimals) {\\n            return\\n                uint(uint64(price.price)) *\\n                10 ** uint32(targetDecimals - priceDecimals);\\n        } else {\\n            return\\n                uint(uint64(price.price)) /\\n                10 ** uint32(priceDecimals - targetDecimals);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x80c20285f9f5caaa5c43eff4b519049a6aec8920550d03f8e981aa6f6a46a81f\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/AuroraSdk.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Codec.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Address of Cross Contract Call precompile in Aurora.\\n// It allows scheduling new promises to NEAR contracts.\\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the predecessor account id of the current call.\\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\\n// Address of current account id precompile in Aurora.\\n// It allows getting the current account id of the current call.\\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\\n// Addresss of promise result precompile in Aurora.\\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\\n// Address of wNEAR ERC20 on mainnet\\naddress constant wNEAR_MAINNET = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n\\nstruct NEAR {\\n    /// Wether the represenative NEAR account id for this contract\\n    /// has already been created or not. This is required since the\\n    /// first cross contract call requires attaching extra deposit\\n    /// to cover storage staking balance.\\n    bool initialized;\\n    /// Address of wNEAR token contract. It is used to charge the user\\n    /// required tokens for paying NEAR storage fees and attached balance\\n    /// for cross contract calls.\\n    IERC20 wNEAR;\\n}\\n\\nlibrary AuroraSdk {\\n    using Codec for bytes;\\n    using Codec for PromiseCreateArgs;\\n    using Codec for PromiseWithCallback;\\n    using Codec for Borsh.Data;\\n    using Borsh for Borsh.Data;\\n\\n    /// Create an instance of NEAR object. Requires the address at which\\n    /// wNEAR ERC20 token contract is deployed.\\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\\n        // Innovation silo doens't have wNEAR deployed, call fund_xcc_sub_account.\\n        NEAR memory near = NEAR(true, wNEAR);\\n        // near.wNEAR.approve(XCC_PRECOMPILE, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        return near;\\n    }\\n\\n    /// Default configuration for mainnet.\\n    function mainnet() public returns (NEAR memory) {\\n        return initNear(IERC20(wNEAR_MAINNET));\\n    }\\n\\n    /// Compute NEAR represtentative account for the given Aurora address.\\n    /// This is the NEAR account created by the cross contract call precompile.\\n    function nearRepresentative(address account) public returns (string memory) {\\n        return addressSubAccount(account, currentAccountId());\\n    }\\n\\n    /// Prepends the given account ID with the given address (hex-encoded).\\n    function addressSubAccount(address account, string memory accountId) public pure returns (string memory) {\\n        return string(abi.encodePacked(Utils.bytesToHex(abi.encodePacked((bytes20(account)))), \\\".\\\", accountId));\\n    }\\n\\n    /// Compute implicity Aurora Address for the given NEAR account.\\n    function implicitAuroraAddress(string memory accountId) public pure returns (address) {\\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\\n    }\\n\\n    /// Compute the implicit Aurora address of the represenative NEAR account\\n    /// for the given Aurora address. Useful when a contract wants to call\\n    /// itself via a callback using cross contract call precompile.\\n    function nearRepresentitiveImplicitAddress(address account) public returns (address) {\\n        return implicitAuroraAddress(nearRepresentative(account));\\n    }\\n\\n    /// Get the promise result at the specified index.\\n    function promiseResult(uint256 index) public returns (PromiseResult memory result) {\\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n\\n        Borsh.Data memory borsh = Borsh.from(returnData);\\n\\n        uint32 length = borsh.decodeU32();\\n        require(index < length, \\\"Index out of bounds\\\");\\n\\n        for (uint256 i = 0; i < index; i++) {\\n            PromiseResultStatus status = PromiseResultStatus(uint8(borsh.decodeU8()));\\n            if (status == PromiseResultStatus.Successful) {\\n                borsh.skipBytes();\\n            }\\n        }\\n\\n        result.status = PromiseResultStatus(borsh.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = borsh.decodeBytes();\\n        }\\n    }\\n\\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\\n    function currentAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Get the NEAR account id of the predecessor contract.\\n    function predecessorAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Creates a base promise. This is not immediately scheduled for execution\\n    /// until transact is called. It can be combined with other promises using\\n    /// `then` combinator.\\n    ///\\n    /// Input is not checekd during promise creation. If it is invalid, the\\n    /// transaction will be scheduled either way, but it will fail during execution.\\n    function call(\\n        NEAR storage near,\\n        string memory targetAccountId,\\n        string memory method,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        /// Need to capture nearBalance before we modify it so that we don't\\n        /// double-charge the user for their initialization cost.\\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(targetAccountId, method, args, nearBalance, nearGas);\\n\\n        if (!near.initialized) {\\n            /// If the contract needs to be initialized, we need to attach\\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\\n            nearBalance += 2_000_000_000_000_000_000_000_000;\\n            near.initialized = true;\\n        }\\n\\n        if (nearBalance > 0) {\\n            near.wNEAR.transferFrom(msg.sender, address(this), uint256(nearBalance));\\n        }\\n\\n        return promise_args;\\n    }\\n\\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\\n    /// to a contract inside `Aurora`.\\n    function auroraCall(NEAR storage near, address target, bytes memory args, uint128 nearBalance, uint64 nearGas)\\n        public\\n        returns (PromiseCreateArgs memory)\\n    {\\n        return call(\\n            near,\\n            currentAccountId(),\\n            \\\"call\\\",\\n            abi.encodePacked(uint8(0), target, uint256(0), args.encode()),\\n            nearBalance,\\n            nearGas\\n        );\\n    }\\n\\n    /// Schedule a base promise to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore (i.e. should not be used with any further combinators).\\n    /// The promise also cannot be used to obtain any result of the call. A result can only be used\\n    /// by attaching a callback using `then` prior to calling `transact`.\\n    function transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    ///\\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\\n    /// https://github.com/ethereum/solidity/issues/869\\n    function transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\\n    /// A separate transaction to execute the scheduled promise is needed.\\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Create a promise with callback from two given promises.\\n    function then(PromiseCreateArgs memory base, PromiseCreateArgs memory callback)\\n        public\\n        pure\\n        returns (PromiseWithCallback memory)\\n    {\\n        return PromiseWithCallback(base, callback);\\n    }\\n}\\n\",\"keccak256\":\"0xc91735a725d736b9c97a4b6f690a75ac00ae6a4353abe08a93c750dd784e1f7a\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(data.ptr + length <= data.end, \\\"Parse error: unexpected EOI\\\");\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length) internal pure returns (bytes32 res) {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length) internal pure returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length) internal view returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data) internal pure returns (bytes memory res) {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x75147926773f187bac6b2d50fa059c63e9ed3b1296b00aad61a28d37aa32d3ef\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            encode(bytes(nearPromise.targetAccountId)),\\n            encode(bytes(nearPromise.method)),\\n            encode(nearPromise.args),\\n            encodeU128(nearPromise.nearBalance),\\n            encodeU64(nearPromise.nearGas)\\n        );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(encode(nearPromise.base), encode(nearPromise.callback));\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseCreateArgs memory nearPromise, ExecutionMode mode)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(encode(mode), encode(PromiseArgsVariant.Create), encode(nearPromise));\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseWithCallback memory nearPromise, ExecutionMode mode)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(encode(mode), encode(PromiseArgsVariant.Callback), encode(nearPromise));\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data) public pure returns (PromiseResult memory result) {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(uint8(data.decodeU8()));\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3f54af89b9beb6efda2250b3ee70a63bf04cb7c576ed0649f79faf6e4eee1c7\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant\\n/// Basic NEAR promise\\n{\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    /// See https://nomicon.io/RuntimeSpec/Components/BindingsSpec/PromisesAPI\\n    /// for a complete description of what is possible.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode\\n/// Eager mode means that the promise WILL be executed in a single\\n/// NEAR transaction.\\n{\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus\\n/// This status should not be reachable.\\n{\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xb24942bea164dd922fc3016083072d72863e0ea7b15ed9dbe582bf8423a5bb41\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8)\\n            | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16)\\n            | ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32)\\n            | ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\\n        v = ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64)\\n            | ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length) internal pure returns (bytes memory res) {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end :=\\n                    add(res, and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length) internal view returns (bytes32 res) {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0x62dd74181dd1b2e30144db30f186bd590f9a21adc1a57c23e66d93a0cca09068\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620038dd380380620038dd83398181016040528101906200003791906200065e565b826003908162000048919062000924565b5073c34322f1f0b9140A52e669B269F6520459cb53426336a80dbc836040518263ffffffff1660e01b815260040162000082919062000a6c565b6040805180830381865af41580156200009f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c5919062000b24565b600460008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002207f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c73c34322f1f0b9140A52e669B269F6520459cb534263a33598bf306040518263ffffffff1660e01b8152600401620001d0919062000b67565b602060405180830381865af4158015620001ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000214919062000b84565b620002ac60201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000bb6565b6000620002c08383620003af60201b60201c565b620003a457600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003406200041960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050620003a9565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200048a826200043f565b810181811067ffffffffffffffff82111715620004ac57620004ab62000450565b5b80604052505050565b6000620004c162000421565b9050620004cf82826200047f565b919050565b600067ffffffffffffffff821115620004f257620004f162000450565b5b620004fd826200043f565b9050602081019050919050565b60005b838110156200052a5780820151818401526020810190506200050d565b60008484015250505050565b60006200054d6200054784620004d4565b620004b5565b9050828152602081018484840111156200056c576200056b6200043a565b5b620005798482856200050a565b509392505050565b600082601f83011262000599576200059862000435565b5b8151620005ab84826020860162000536565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005e182620005b4565b9050919050565b6000620005f582620005d4565b9050919050565b6200060781620005e8565b81146200061357600080fd5b50565b6000815190506200062781620005fc565b92915050565b6200063881620005d4565b81146200064457600080fd5b50565b60008151905062000658816200062d565b92915050565b6000806000606084860312156200067a57620006796200042b565b5b600084015167ffffffffffffffff8111156200069b576200069a62000430565b5b620006a98682870162000581565b9350506020620006bc8682870162000616565b9250506040620006cf8682870162000647565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200072c57607f821691505b602082108103620007425762000741620006e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200076d565b620007b886836200076d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000805620007ff620007f984620007d0565b620007da565b620007d0565b9050919050565b6000819050919050565b6200082183620007e4565b6200083962000830826200080c565b8484546200077a565b825550505050565b600090565b6200085062000841565b6200085d81848462000816565b505050565b5b8181101562000885576200087960008262000846565b60018101905062000863565b5050565b601f821115620008d4576200089e8162000748565b620008a9846200075d565b81016020851015620008b9578190505b620008d1620008c8856200075d565b83018262000862565b50505b505050565b600082821c905092915050565b6000620008f960001984600802620008d9565b1980831691505092915050565b6000620009148383620008e6565b9150826002028217905092915050565b6200092f82620006d9565b67ffffffffffffffff8111156200094b576200094a62000450565b5b62000957825462000713565b6200096482828562000889565b600060209050601f8311600181146200099c576000841562000987578287015190505b62000993858262000906565b86555062000a03565b601f198416620009ac8662000748565b60005b82811015620009d657848901518255600182019150602085019450602081019050620009af565b86831015620009f65784890151620009f2601f891682620008e6565b8355505b6001600288020188555050505b505050505050565b600062000a2c62000a2662000a2084620005b4565b620007da565b620005b4565b9050919050565b600062000a408262000a0b565b9050919050565b600062000a548262000a33565b9050919050565b62000a668162000a47565b82525050565b600060208201905062000a83600083018462000a5b565b92915050565b600080fd5b60008115159050919050565b62000aa58162000a8e565b811462000ab157600080fd5b50565b60008151905062000ac58162000a9a565b92915050565b60006040828403121562000ae45762000ae362000a89565b5b62000af06040620004b5565b9050600062000b028482850162000ab4565b600083015250602062000b188482850162000616565b60208301525092915050565b60006040828403121562000b3d5762000b3c6200042b565b5b600062000b4d8482850162000acb565b91505092915050565b62000b6181620005d4565b82525050565b600060208201905062000b7e600083018462000b56565b92915050565b60006020828403121562000b9d5762000b9c6200042b565b5b600062000bad8482850162000647565b91505092915050565b612d178062000bc66000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806391d1485411610097578063ce3d448b11610066578063ce3d448b1461029d578063d547741f146102bb578063d5f9ea2f146102d7578063e602af76146102f557610100565b806391d1485414610213578063a217fddf14610243578063a51a681814610261578063b389fbed1461027f57610100565b80632f2ff15d116100d35780632f2ff15d1461018d57806336568abe146101a957806384b75b87146101c5578063918d2f41146101f557610100565b806301ffc9a71461010557806302834588146101355780630a73eb6a14610153578063248a9ca31461015d575b600080fd5b61011f600480360381019061011a919061144a565b610314565b60405161012c9190611492565b60405180910390f35b61013d61038e565b60405161014a91906114ee565b60405180910390f35b61015b6103b4565b005b6101776004803603810190610172919061153f565b610638565b604051610184919061157b565b60405180910390f35b6101a760048036038101906101a291906115c2565b610657565b005b6101c360048036038101906101be91906115c2565b610679565b005b6101df60048036038101906101da9190611781565b6106f4565b6040516101ec91906117f6565b60405180910390f35b6101fd610aae565b60405161020a919061157b565b60405180910390f35b61022d600480360381019061022891906115c2565b610ad2565b60405161023a9190611492565b60405180910390f35b61024b610b3c565b604051610258919061157b565b60405180910390f35b610269610b43565b6040516102769190611890565b60405180910390f35b610287610bd1565b60405161029491906117f6565b60405180910390f35b6102a5610bd7565b6040516102b291906114ee565b60405180910390f35b6102d560048036038101906102d091906115c2565b610bfd565b005b6102df610c1f565b6040516102ec91906114ee565b60405180910390f35b6102fd610c9e565b60405161030b929190611911565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610387575061038682610cdd565b5b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c6103de81610d47565b600160028111156103f2576103f161193a565b5b73c34322f1f0b9140A52e669B269F6520459cb53426310cdb49360006040518263ffffffff1660e01b815260040161042a91906119a4565b600060405180830381865af4158015610447573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104709190611aca565b6000015160028111156104865761048561193a565b5b146104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90611b5f565b60405180910390fd5b600073c34322f1f0b9140A52e669B269F6520459cb53426310cdb49360006040518263ffffffff1660e01b815260040161050091906119a4565b600060405180830381865af415801561051d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105469190611aca565b60200151905060008160018151811061056257610561611b7f565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690611bfa565b60405180910390fd5b60006105f96105f46105ef8460028087516105ea9190611c49565b610d5b565b610e79565b610eb1565b90506000818060200190518101906106119190611dd3565b905061062c81600860009054906101000a900460ff16610eff565b60078190555050505050565b6000806000838152602001908152602001600020600101549050919050565b61066082610638565b61066981610d47565b6106738383611013565b50505050565b610681611104565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106e5576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106ef828261110c565b505050565b600081600860006101000a81548160ff021916908360ff1602179055506000836040516024016107249190611e55565b6040516020818303038152906040527f31d98b3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600473c34322f1f0b9140A52e669B269F6520459cb534263925be54d909160036000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008873B4404F32bEC247537F230C6657Fb34c7e6FB8a3c6312496a1b90916040518263ffffffff1660e01b81526004016108259190611ec1565b600060405180830381865af4158015610842573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061086b9190611ee3565b60405160200161087e9493929190612007565b6040516020818303038152906040526000655af3107a40006040518663ffffffff1660e01b81526004016108b695949392919061220a565b600060405180830381865af41580156108d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108fc919061242b565b90506000600473c34322f1f0b9140A52e669B269F6520459cb53426331b0e0e4909130630a73eb6a60e01b6040516020016109379190612495565b60405160208183030381529060405260006509184e72a0006040518663ffffffff1660e01b815260040161096f9594939291906124bf565b600060405180830381865af415801561098c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109b5919061242b565b90508173c34322f1f0b9140A52e669B269F6520459cb534263987cbd719091836040518363ffffffff1660e01b81526004016109f292919061264f565b600060405180830381865af4158015610a0f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a38919061270e565b73c34322f1f0b9140A52e669B269F6520459cb534263b4fa799390916040518263ffffffff1660e01b8152600401610a70919061281f565b60006040518083038186803b158015610a8857600080fd5b505af4158015610a9c573d6000803e3d6000fd5b50505050600754935050505092915050565b7f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c81565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60038054610b5090612087565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7c90612087565b8015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b505050505081565b60075481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c0682610638565b610c0f81610d47565b610c19838361110c565b50505050565b600073c34322f1f0b9140A52e669B269F6520459cb534263a33598bf306040518263ffffffff1660e01b8152600401610c589190612841565b602060405180830381865af4158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c999190612871565b905090565b60048060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610d5881610d53611104565b6111fe565b50565b606081601f83610d6b919061289e565b1015610dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da39061291e565b60405180910390fd5b8183610db8919061289e565b84511015610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df29061298a565b60405180910390fd5b6060821560008114610e1c5760405191506000825260208201604052610e6d565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610e5a5780518352602083019250602081019050610e3d565b50868552601f19601f8301166040525050505b50809150509392505050565b610e816113c4565b600082905060208101826000018181525050610e9c8161124f565b82600001510182602001818152505050919050565b60606000610ebe8361125a565b63ffffffff169050610ed9818461128290919063ffffffff16565b610ee78360000151826112d3565b91508083600001818151019150818152505050919050565b600080836000015160070b1280610f1d57506000836040015160030b135b80610f4e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836040015160030b125b15610f5857600080fd5b600083604001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f8a91906129aa565b90508060ff168360ff1610610fd5578083610fa591906129e7565b60ff16600a610fb49190612b5f565b846000015167ffffffffffffffff16610fcd9190612baa565b91505061100d565b8281610fe191906129e7565b60ff16600a610ff09190612b5f565b846000015167ffffffffffffffff166110099190612c1b565b9150505b92915050565b600061101f8383610ad2565b6110f957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611096611104565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506110fe565b600090505b92915050565b600033905090565b60006111188383610ad2565b156111f357600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611190611104565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506111f8565b600090505b92915050565b6112088282610ad2565b61124b5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611242929190612c4c565b60405180910390fd5b5050565b600081519050919050565b600061127b61127360048461134390919063ffffffff16565b60e01c611380565b9050919050565b81602001518183600001510111156112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c690612cc1565b60405180910390fd5b5050565b60606000821461133d5760405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810180604052828252602082015b60011561133a57845181526020810190508181031561133a57602085019450611316565b50505b92915050565b6000611358828461128290919063ffffffff16565b611365836000015161124f565b60001b90508183600001818151019150818152505092915050565b6000600863ff00ff00831663ffffffff16901c600862ff00ff841663ffffffff16901b17915060108263ffffffff16901c60108363ffffffff16901b179050919050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611427816113f2565b811461143257600080fd5b50565b6000813590506114448161141e565b92915050565b6000602082840312156114605761145f6113e8565b5b600061146e84828501611435565b91505092915050565b60008115159050919050565b61148c81611477565b82525050565b60006020820190506114a76000830184611483565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114d8826114ad565b9050919050565b6114e8816114cd565b82525050565b600060208201905061150360008301846114df565b92915050565b6000819050919050565b61151c81611509565b811461152757600080fd5b50565b60008135905061153981611513565b92915050565b600060208284031215611555576115546113e8565b5b60006115638482850161152a565b91505092915050565b61157581611509565b82525050565b6000602082019050611590600083018461156c565b92915050565b61159f816114cd565b81146115aa57600080fd5b50565b6000813590506115bc81611596565b92915050565b600080604083850312156115d9576115d86113e8565b5b60006115e78582860161152a565b92505060206115f8858286016115ad565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116558261160c565b810181811067ffffffffffffffff821117156116745761167361161d565b5b80604052505050565b60006116876113de565b9050611693828261164c565b919050565b600067ffffffffffffffff8211156116b3576116b261161d565b5b6116bc8261160c565b9050602081019050919050565b82818337600083830152505050565b60006116eb6116e684611698565b61167d565b90508281526020810184848401111561170757611706611607565b5b6117128482856116c9565b509392505050565b600082601f83011261172f5761172e611602565b5b813561173f8482602086016116d8565b91505092915050565b600060ff82169050919050565b61175e81611748565b811461176957600080fd5b50565b60008135905061177b81611755565b92915050565b60008060408385031215611798576117976113e8565b5b600083013567ffffffffffffffff8111156117b6576117b56113ed565b5b6117c28582860161171a565b92505060206117d38582860161176c565b9150509250929050565b6000819050919050565b6117f0816117dd565b82525050565b600060208201905061180b60008301846117e7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561184b578082015181840152602081019050611830565b60008484015250505050565b600061186282611811565b61186c818561181c565b935061187c81856020860161182d565b6118858161160c565b840191505092915050565b600060208201905081810360008301526118aa8184611857565b905092915050565b6000819050919050565b60006118d76118d26118cd846114ad565b6118b2565b6114ad565b9050919050565b60006118e9826118bc565b9050919050565b60006118fb826118de565b9050919050565b61190b816118f0565b82525050565b60006040820190506119266000830185611483565b6119336020830184611902565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b600061198e61198961198484611969565b6118b2565b6117dd565b9050919050565b61199e81611973565b82525050565b60006020820190506119b96000830184611995565b92915050565b600080fd5b600080fd5b600381106119d657600080fd5b50565b6000815190506119e8816119c9565b92915050565b6000611a016119fc84611698565b61167d565b905082815260208101848484011115611a1d57611a1c611607565b5b611a2884828561182d565b509392505050565b600082601f830112611a4557611a44611602565b5b8151611a558482602086016119ee565b91505092915050565b600060408284031215611a7457611a736119bf565b5b611a7e604061167d565b90506000611a8e848285016119d9565b600083015250602082015167ffffffffffffffff811115611ab257611ab16119c4565b5b611abe84828501611a30565b60208301525092915050565b600060208284031215611ae057611adf6113e8565b5b600082015167ffffffffffffffff811115611afe57611afd6113ed565b5b611b0a84828501611a5e565b91505092915050565b7f6765745079746850726963652063616c6c206661696c65642d4e454152000000600082015250565b6000611b49601d8361181c565b9150611b5482611b13565b602082019050919050565b60006020820190508181036000830152611b7881611b3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6765745079746850726963652063616c6c206661696c65642d4175726f726100600082015250565b6000611be4601f8361181c565b9150611bef82611bae565b602082019050919050565b60006020820190508181036000830152611c1381611bd7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c54826117dd565b9150611c5f836117dd565b9250828203905081811115611c7757611c76611c1a565b5b92915050565b60008160070b9050919050565b611c9381611c7d565b8114611c9e57600080fd5b50565b600081519050611cb081611c8a565b92915050565b600067ffffffffffffffff82169050919050565b611cd381611cb6565b8114611cde57600080fd5b50565b600081519050611cf081611cca565b92915050565b60008160030b9050919050565b611d0c81611cf6565b8114611d1757600080fd5b50565b600081519050611d2981611d03565b92915050565b611d38816117dd565b8114611d4357600080fd5b50565b600081519050611d5581611d2f565b92915050565b600060808284031215611d7157611d706119bf565b5b611d7b608061167d565b90506000611d8b84828501611ca1565b6000830152506020611d9f84828501611ce1565b6020830152506040611db384828501611d1a565b6040830152506060611dc784828501611d46565b60608301525092915050565b600060808284031215611de957611de86113e8565b5b6000611df784828501611d5b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000611e2782611e00565b611e318185611e0b565b9350611e4181856020860161182d565b611e4a8161160c565b840191505092915050565b60006020820190508181036000830152611e6f8184611e1c565b905092915050565b600082825260208201905092915050565b6000611e9382611e00565b611e9d8185611e77565b9350611ead81856020860161182d565b611eb68161160c565b840191505092915050565b60006020820190508181036000830152611edb8184611e88565b905092915050565b600060208284031215611ef957611ef86113e8565b5b600082015167ffffffffffffffff811115611f1757611f166113ed565b5b611f2384828501611a30565b91505092915050565b60008160f81b9050919050565b6000611f4482611f2c565b9050919050565b611f5c611f5782611748565b611f39565b82525050565b60008160601b9050919050565b6000611f7a82611f62565b9050919050565b6000611f8c82611f6f565b9050919050565b611fa4611f9f826114cd565b611f81565b82525050565b6000819050919050565b611fc5611fc0826117dd565b611faa565b82525050565b600081905092915050565b6000611fe182611e00565b611feb8185611fcb565b9350611ffb81856020860161182d565b80840191505092915050565b60006120138287611f4b565b6001820191506120238286611f93565b6014820191506120338285611fb4565b6020820191506120438284611fd6565b915081905095945050505050565b8082525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061209f57607f821691505b6020821081036120b2576120b1612058565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b600081546120eb81612087565b6120f581866120b8565b94506001821660008114612110576001811461212657612159565b60ff198316865281151560200286019350612159565b61212f856120c9565b60005b8381101561215157815481890152600182019150602081019050612132565b808801955050505b50505092915050565b7f63616c6c00000000000000000000000000000000000000000000000000000000600082015250565b60006121986004836120b8565b91506121a382612162565b602082019050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b60006121e56121e06121db84611969565b6118b2565b6121ae565b9050919050565b6121f5816121ca565b82525050565b61220481611cb6565b82525050565b600060c08201905061221f6000830188612051565b818103602083015261223181876120de565b905081810360408301526122448161218b565b905081810360608301526122588186611e88565b905061226760808301856121ec565b61227460a08301846121fb565b9695505050505050565b600067ffffffffffffffff8211156122995761229861161d565b5b6122a28261160c565b9050602081019050919050565b60006122c26122bd8461227e565b61167d565b9050828152602081018484840111156122de576122dd611607565b5b6122e984828561182d565b509392505050565b600082601f83011261230657612305611602565b5b81516123168482602086016122af565b91505092915050565b612328816121ae565b811461233357600080fd5b50565b6000815190506123458161231f565b92915050565b600060a08284031215612361576123606119bf565b5b61236b60a061167d565b9050600082015167ffffffffffffffff81111561238b5761238a6119c4565b5b612397848285016122f1565b600083015250602082015167ffffffffffffffff8111156123bb576123ba6119c4565b5b6123c7848285016122f1565b602083015250604082015167ffffffffffffffff8111156123eb576123ea6119c4565b5b6123f784828501611a30565b604083015250606061240b84828501612336565b606083015250608061241f84828501611ce1565b60808301525092915050565b600060208284031215612441576124406113e8565b5b600082015167ffffffffffffffff81111561245f5761245e6113ed565b5b61246b8482850161234b565b91505092915050565b6000819050919050565b61248f61248a826113f2565b612474565b82525050565b60006124a1828461247e565b60048201915081905092915050565b6124b9816114cd565b82525050565b600060a0820190506124d46000830188612051565b6124e160208301876124b0565b81810360408301526124f38186611e88565b905061250260608301856121ec565b61250f60808301846121fb565b9695505050505050565b600082825260208201905092915050565b600061253582611811565b61253f8185612519565b935061254f81856020860161182d565b6125588161160c565b840191505092915050565b600082825260208201905092915050565b600061257f82611e00565b6125898185612563565b935061259981856020860161182d565b6125a28161160c565b840191505092915050565b6125b6816121ae565b82525050565b6125c581611cb6565b82525050565b600060a08301600083015184820360008601526125e8828261252a565b91505060208301518482036020860152612602828261252a565b9150506040830151848203604086015261261c8282612574565b915050606083015161263160608601826125ad565b50608083015161264460808601826125bc565b508091505092915050565b6000604082019050818103600083015261266981856125cb565b9050818103602083015261267d81846125cb565b90509392505050565b60006040828403121561269c5761269b6119bf565b5b6126a6604061167d565b9050600082015167ffffffffffffffff8111156126c6576126c56119c4565b5b6126d28482850161234b565b600083015250602082015167ffffffffffffffff8111156126f6576126f56119c4565b5b6127028482850161234b565b60208301525092915050565b600060208284031215612724576127236113e8565b5b600082015167ffffffffffffffff811115612742576127416113ed565b5b61274e84828501612686565b91505092915050565b600060a0830160008301518482036000860152612774828261252a565b9150506020830151848203602086015261278e828261252a565b915050604083015184820360408601526127a88282612574565b91505060608301516127bd60608601826125ad565b5060808301516127d060808601826125bc565b508091505092915050565b600060408301600083015184820360008601526127f88282612757565b915050602083015184820360208601526128128282612757565b9150508091505092915050565b6000602082019050818103600083015261283981846127db565b905092915050565b600060208201905061285660008301846124b0565b92915050565b60008151905061286b81611596565b92915050565b600060208284031215612887576128866113e8565b5b60006128958482850161285c565b91505092915050565b60006128a9826117dd565b91506128b4836117dd565b92508282019050808211156128cc576128cb611c1a565b5b92915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612908600e8361181c565b9150612913826128d2565b602082019050919050565b60006020820190508181036000830152612937816128fb565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b600061297460118361181c565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b60006129b582611cf6565b91506129c083611cf6565b92508282026129ce81611cf6565b91508082146129e0576129df611c1a565b5b5092915050565b60006129f282611748565b91506129fd83611748565b9250828203905060ff811115612a1657612a15611c1a565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115612a7357808604811115612a4f57612a4e611c1a565b5b6001851615612a5e5780820291505b8081029050612a6c85612a1c565b9450612a33565b94509492505050565b600082612a8c5760019050612b48565b81612a9a5760009050612b48565b8160018114612ab05760028114612aba57612ae9565b6001915050612b48565b60ff841115612acc57612acb611c1a565b5b8360020a915084821115612ae357612ae2611c1a565b5b50612b48565b5060208310610133831016604e8410600b8410161715612b1e5782820a905083811115612b1957612b18611c1a565b5b612b48565b612b2b8484846001612a29565b92509050818404811115612b4257612b41611c1a565b5b81810290505b9392505050565b600063ffffffff82169050919050565b6000612b6a826117dd565b9150612b7583612b4f565b9250612ba27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612a7c565b905092915050565b6000612bb5826117dd565b9150612bc0836117dd565b9250828202612bce816117dd565b91508282048414831517612be557612be4611c1a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c26826117dd565b9150612c31836117dd565b925082612c4157612c40612bec565b5b828204905092915050565b6000604082019050612c6160008301856114df565b612c6e602083018461156c565b9392505050565b7f5061727365206572726f723a20756e657870656374656420454f490000000000600082015250565b6000612cab601b8361181c565b9150612cb682612c75565b602082019050919050565b60006020820190508181036000830152612cda81612c9e565b905091905056fea2646970667358221220866cf318a5dc82ad4d0924dd335e6012632ebc4fc4ee6c9f2576522030c764ed64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806391d1485411610097578063ce3d448b11610066578063ce3d448b1461029d578063d547741f146102bb578063d5f9ea2f146102d7578063e602af76146102f557610100565b806391d1485414610213578063a217fddf14610243578063a51a681814610261578063b389fbed1461027f57610100565b80632f2ff15d116100d35780632f2ff15d1461018d57806336568abe146101a957806384b75b87146101c5578063918d2f41146101f557610100565b806301ffc9a71461010557806302834588146101355780630a73eb6a14610153578063248a9ca31461015d575b600080fd5b61011f600480360381019061011a919061144a565b610314565b60405161012c9190611492565b60405180910390f35b61013d61038e565b60405161014a91906114ee565b60405180910390f35b61015b6103b4565b005b6101776004803603810190610172919061153f565b610638565b604051610184919061157b565b60405180910390f35b6101a760048036038101906101a291906115c2565b610657565b005b6101c360048036038101906101be91906115c2565b610679565b005b6101df60048036038101906101da9190611781565b6106f4565b6040516101ec91906117f6565b60405180910390f35b6101fd610aae565b60405161020a919061157b565b60405180910390f35b61022d600480360381019061022891906115c2565b610ad2565b60405161023a9190611492565b60405180910390f35b61024b610b3c565b604051610258919061157b565b60405180910390f35b610269610b43565b6040516102769190611890565b60405180910390f35b610287610bd1565b60405161029491906117f6565b60405180910390f35b6102a5610bd7565b6040516102b291906114ee565b60405180910390f35b6102d560048036038101906102d091906115c2565b610bfd565b005b6102df610c1f565b6040516102ec91906114ee565b60405180910390f35b6102fd610c9e565b60405161030b929190611911565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610387575061038682610cdd565b5b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c6103de81610d47565b600160028111156103f2576103f161193a565b5b73__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__6310cdb49360006040518263ffffffff1660e01b815260040161042a91906119a4565b600060405180830381865af4158015610447573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104709190611aca565b6000015160028111156104865761048561193a565b5b146104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90611b5f565b60405180910390fd5b600073__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__6310cdb49360006040518263ffffffff1660e01b815260040161050091906119a4565b600060405180830381865af415801561051d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105469190611aca565b60200151905060008160018151811061056257610561611b7f565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690611bfa565b60405180910390fd5b60006105f96105f46105ef8460028087516105ea9190611c49565b610d5b565b610e79565b610eb1565b90506000818060200190518101906106119190611dd3565b905061062c81600860009054906101000a900460ff16610eff565b60078190555050505050565b6000806000838152602001908152602001600020600101549050919050565b61066082610638565b61066981610d47565b6106738383611013565b50505050565b610681611104565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106e5576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106ef828261110c565b505050565b600081600860006101000a81548160ff021916908360ff1602179055506000836040516024016107249190611e55565b6040516020818303038152906040527f31d98b3f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600473__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__63925be54d909160036000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008873__$b47451c9693ac4910bddd2ef01d769da1b$__6312496a1b90916040518263ffffffff1660e01b81526004016108259190611ec1565b600060405180830381865af4158015610842573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061086b9190611ee3565b60405160200161087e9493929190612007565b6040516020818303038152906040526000655af3107a40006040518663ffffffff1660e01b81526004016108b695949392919061220a565b600060405180830381865af41580156108d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108fc919061242b565b90506000600473__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__6331b0e0e4909130630a73eb6a60e01b6040516020016109379190612495565b60405160208183030381529060405260006509184e72a0006040518663ffffffff1660e01b815260040161096f9594939291906124bf565b600060405180830381865af415801561098c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109b5919061242b565b90508173__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__63987cbd719091836040518363ffffffff1660e01b81526004016109f292919061264f565b600060405180830381865af4158015610a0f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a38919061270e565b73__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__63b4fa799390916040518263ffffffff1660e01b8152600401610a70919061281f565b60006040518083038186803b158015610a8857600080fd5b505af4158015610a9c573d6000803e3d6000fd5b50505050600754935050505092915050565b7f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c81565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60038054610b5090612087565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7c90612087565b8015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b505050505081565b60075481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c0682610638565b610c0f81610d47565b610c19838361110c565b50505050565b600073__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__63a33598bf306040518263ffffffff1660e01b8152600401610c589190612841565b602060405180830381865af4158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c999190612871565b905090565b60048060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610d5881610d53611104565b6111fe565b50565b606081601f83610d6b919061289e565b1015610dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da39061291e565b60405180910390fd5b8183610db8919061289e565b84511015610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df29061298a565b60405180910390fd5b6060821560008114610e1c5760405191506000825260208201604052610e6d565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610e5a5780518352602083019250602081019050610e3d565b50868552601f19601f8301166040525050505b50809150509392505050565b610e816113c4565b600082905060208101826000018181525050610e9c8161124f565b82600001510182602001818152505050919050565b60606000610ebe8361125a565b63ffffffff169050610ed9818461128290919063ffffffff16565b610ee78360000151826112d3565b91508083600001818151019150818152505050919050565b600080836000015160070b1280610f1d57506000836040015160030b135b80610f4e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836040015160030b125b15610f5857600080fd5b600083604001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f8a91906129aa565b90508060ff168360ff1610610fd5578083610fa591906129e7565b60ff16600a610fb49190612b5f565b846000015167ffffffffffffffff16610fcd9190612baa565b91505061100d565b8281610fe191906129e7565b60ff16600a610ff09190612b5f565b846000015167ffffffffffffffff166110099190612c1b565b9150505b92915050565b600061101f8383610ad2565b6110f957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611096611104565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506110fe565b600090505b92915050565b600033905090565b60006111188383610ad2565b156111f357600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611190611104565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506111f8565b600090505b92915050565b6112088282610ad2565b61124b5780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611242929190612c4c565b60405180910390fd5b5050565b600081519050919050565b600061127b61127360048461134390919063ffffffff16565b60e01c611380565b9050919050565b81602001518183600001510111156112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c690612cc1565b60405180910390fd5b5050565b60606000821461133d5760405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810180604052828252602082015b60011561133a57845181526020810190508181031561133a57602085019450611316565b50505b92915050565b6000611358828461128290919063ffffffff16565b611365836000015161124f565b60001b90508183600001818151019150818152505092915050565b6000600863ff00ff00831663ffffffff16901c600862ff00ff841663ffffffff16901b17915060108263ffffffff16901c60108363ffffffff16901b179050919050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611427816113f2565b811461143257600080fd5b50565b6000813590506114448161141e565b92915050565b6000602082840312156114605761145f6113e8565b5b600061146e84828501611435565b91505092915050565b60008115159050919050565b61148c81611477565b82525050565b60006020820190506114a76000830184611483565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114d8826114ad565b9050919050565b6114e8816114cd565b82525050565b600060208201905061150360008301846114df565b92915050565b6000819050919050565b61151c81611509565b811461152757600080fd5b50565b60008135905061153981611513565b92915050565b600060208284031215611555576115546113e8565b5b60006115638482850161152a565b91505092915050565b61157581611509565b82525050565b6000602082019050611590600083018461156c565b92915050565b61159f816114cd565b81146115aa57600080fd5b50565b6000813590506115bc81611596565b92915050565b600080604083850312156115d9576115d86113e8565b5b60006115e78582860161152a565b92505060206115f8858286016115ad565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116558261160c565b810181811067ffffffffffffffff821117156116745761167361161d565b5b80604052505050565b60006116876113de565b9050611693828261164c565b919050565b600067ffffffffffffffff8211156116b3576116b261161d565b5b6116bc8261160c565b9050602081019050919050565b82818337600083830152505050565b60006116eb6116e684611698565b61167d565b90508281526020810184848401111561170757611706611607565b5b6117128482856116c9565b509392505050565b600082601f83011261172f5761172e611602565b5b813561173f8482602086016116d8565b91505092915050565b600060ff82169050919050565b61175e81611748565b811461176957600080fd5b50565b60008135905061177b81611755565b92915050565b60008060408385031215611798576117976113e8565b5b600083013567ffffffffffffffff8111156117b6576117b56113ed565b5b6117c28582860161171a565b92505060206117d38582860161176c565b9150509250929050565b6000819050919050565b6117f0816117dd565b82525050565b600060208201905061180b60008301846117e7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561184b578082015181840152602081019050611830565b60008484015250505050565b600061186282611811565b61186c818561181c565b935061187c81856020860161182d565b6118858161160c565b840191505092915050565b600060208201905081810360008301526118aa8184611857565b905092915050565b6000819050919050565b60006118d76118d26118cd846114ad565b6118b2565b6114ad565b9050919050565b60006118e9826118bc565b9050919050565b60006118fb826118de565b9050919050565b61190b816118f0565b82525050565b60006040820190506119266000830185611483565b6119336020830184611902565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b600061198e61198961198484611969565b6118b2565b6117dd565b9050919050565b61199e81611973565b82525050565b60006020820190506119b96000830184611995565b92915050565b600080fd5b600080fd5b600381106119d657600080fd5b50565b6000815190506119e8816119c9565b92915050565b6000611a016119fc84611698565b61167d565b905082815260208101848484011115611a1d57611a1c611607565b5b611a2884828561182d565b509392505050565b600082601f830112611a4557611a44611602565b5b8151611a558482602086016119ee565b91505092915050565b600060408284031215611a7457611a736119bf565b5b611a7e604061167d565b90506000611a8e848285016119d9565b600083015250602082015167ffffffffffffffff811115611ab257611ab16119c4565b5b611abe84828501611a30565b60208301525092915050565b600060208284031215611ae057611adf6113e8565b5b600082015167ffffffffffffffff811115611afe57611afd6113ed565b5b611b0a84828501611a5e565b91505092915050565b7f6765745079746850726963652063616c6c206661696c65642d4e454152000000600082015250565b6000611b49601d8361181c565b9150611b5482611b13565b602082019050919050565b60006020820190508181036000830152611b7881611b3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6765745079746850726963652063616c6c206661696c65642d4175726f726100600082015250565b6000611be4601f8361181c565b9150611bef82611bae565b602082019050919050565b60006020820190508181036000830152611c1381611bd7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c54826117dd565b9150611c5f836117dd565b9250828203905081811115611c7757611c76611c1a565b5b92915050565b60008160070b9050919050565b611c9381611c7d565b8114611c9e57600080fd5b50565b600081519050611cb081611c8a565b92915050565b600067ffffffffffffffff82169050919050565b611cd381611cb6565b8114611cde57600080fd5b50565b600081519050611cf081611cca565b92915050565b60008160030b9050919050565b611d0c81611cf6565b8114611d1757600080fd5b50565b600081519050611d2981611d03565b92915050565b611d38816117dd565b8114611d4357600080fd5b50565b600081519050611d5581611d2f565b92915050565b600060808284031215611d7157611d706119bf565b5b611d7b608061167d565b90506000611d8b84828501611ca1565b6000830152506020611d9f84828501611ce1565b6020830152506040611db384828501611d1a565b6040830152506060611dc784828501611d46565b60608301525092915050565b600060808284031215611de957611de86113e8565b5b6000611df784828501611d5b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000611e2782611e00565b611e318185611e0b565b9350611e4181856020860161182d565b611e4a8161160c565b840191505092915050565b60006020820190508181036000830152611e6f8184611e1c565b905092915050565b600082825260208201905092915050565b6000611e9382611e00565b611e9d8185611e77565b9350611ead81856020860161182d565b611eb68161160c565b840191505092915050565b60006020820190508181036000830152611edb8184611e88565b905092915050565b600060208284031215611ef957611ef86113e8565b5b600082015167ffffffffffffffff811115611f1757611f166113ed565b5b611f2384828501611a30565b91505092915050565b60008160f81b9050919050565b6000611f4482611f2c565b9050919050565b611f5c611f5782611748565b611f39565b82525050565b60008160601b9050919050565b6000611f7a82611f62565b9050919050565b6000611f8c82611f6f565b9050919050565b611fa4611f9f826114cd565b611f81565b82525050565b6000819050919050565b611fc5611fc0826117dd565b611faa565b82525050565b600081905092915050565b6000611fe182611e00565b611feb8185611fcb565b9350611ffb81856020860161182d565b80840191505092915050565b60006120138287611f4b565b6001820191506120238286611f93565b6014820191506120338285611fb4565b6020820191506120438284611fd6565b915081905095945050505050565b8082525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061209f57607f821691505b6020821081036120b2576120b1612058565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b600081546120eb81612087565b6120f581866120b8565b94506001821660008114612110576001811461212657612159565b60ff198316865281151560200286019350612159565b61212f856120c9565b60005b8381101561215157815481890152600182019150602081019050612132565b808801955050505b50505092915050565b7f63616c6c00000000000000000000000000000000000000000000000000000000600082015250565b60006121986004836120b8565b91506121a382612162565b602082019050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b60006121e56121e06121db84611969565b6118b2565b6121ae565b9050919050565b6121f5816121ca565b82525050565b61220481611cb6565b82525050565b600060c08201905061221f6000830188612051565b818103602083015261223181876120de565b905081810360408301526122448161218b565b905081810360608301526122588186611e88565b905061226760808301856121ec565b61227460a08301846121fb565b9695505050505050565b600067ffffffffffffffff8211156122995761229861161d565b5b6122a28261160c565b9050602081019050919050565b60006122c26122bd8461227e565b61167d565b9050828152602081018484840111156122de576122dd611607565b5b6122e984828561182d565b509392505050565b600082601f83011261230657612305611602565b5b81516123168482602086016122af565b91505092915050565b612328816121ae565b811461233357600080fd5b50565b6000815190506123458161231f565b92915050565b600060a08284031215612361576123606119bf565b5b61236b60a061167d565b9050600082015167ffffffffffffffff81111561238b5761238a6119c4565b5b612397848285016122f1565b600083015250602082015167ffffffffffffffff8111156123bb576123ba6119c4565b5b6123c7848285016122f1565b602083015250604082015167ffffffffffffffff8111156123eb576123ea6119c4565b5b6123f784828501611a30565b604083015250606061240b84828501612336565b606083015250608061241f84828501611ce1565b60808301525092915050565b600060208284031215612441576124406113e8565b5b600082015167ffffffffffffffff81111561245f5761245e6113ed565b5b61246b8482850161234b565b91505092915050565b6000819050919050565b61248f61248a826113f2565b612474565b82525050565b60006124a1828461247e565b60048201915081905092915050565b6124b9816114cd565b82525050565b600060a0820190506124d46000830188612051565b6124e160208301876124b0565b81810360408301526124f38186611e88565b905061250260608301856121ec565b61250f60808301846121fb565b9695505050505050565b600082825260208201905092915050565b600061253582611811565b61253f8185612519565b935061254f81856020860161182d565b6125588161160c565b840191505092915050565b600082825260208201905092915050565b600061257f82611e00565b6125898185612563565b935061259981856020860161182d565b6125a28161160c565b840191505092915050565b6125b6816121ae565b82525050565b6125c581611cb6565b82525050565b600060a08301600083015184820360008601526125e8828261252a565b91505060208301518482036020860152612602828261252a565b9150506040830151848203604086015261261c8282612574565b915050606083015161263160608601826125ad565b50608083015161264460808601826125bc565b508091505092915050565b6000604082019050818103600083015261266981856125cb565b9050818103602083015261267d81846125cb565b90509392505050565b60006040828403121561269c5761269b6119bf565b5b6126a6604061167d565b9050600082015167ffffffffffffffff8111156126c6576126c56119c4565b5b6126d28482850161234b565b600083015250602082015167ffffffffffffffff8111156126f6576126f56119c4565b5b6127028482850161234b565b60208301525092915050565b600060208284031215612724576127236113e8565b5b600082015167ffffffffffffffff811115612742576127416113ed565b5b61274e84828501612686565b91505092915050565b600060a0830160008301518482036000860152612774828261252a565b9150506020830151848203602086015261278e828261252a565b915050604083015184820360408601526127a88282612574565b91505060608301516127bd60608601826125ad565b5060808301516127d060808601826125bc565b508091505092915050565b600060408301600083015184820360008601526127f88282612757565b915050602083015184820360208601526128128282612757565b9150508091505092915050565b6000602082019050818103600083015261283981846127db565b905092915050565b600060208201905061285660008301846124b0565b92915050565b60008151905061286b81611596565b92915050565b600060208284031215612887576128866113e8565b5b60006128958482850161285c565b91505092915050565b60006128a9826117dd565b91506128b4836117dd565b92508282019050808211156128cc576128cb611c1a565b5b92915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612908600e8361181c565b9150612913826128d2565b602082019050919050565b60006020820190508181036000830152612937816128fb565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b600061297460118361181c565b915061297f8261293e565b602082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b60006129b582611cf6565b91506129c083611cf6565b92508282026129ce81611cf6565b91508082146129e0576129df611c1a565b5b5092915050565b60006129f282611748565b91506129fd83611748565b9250828203905060ff811115612a1657612a15611c1a565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115612a7357808604811115612a4f57612a4e611c1a565b5b6001851615612a5e5780820291505b8081029050612a6c85612a1c565b9450612a33565b94509492505050565b600082612a8c5760019050612b48565b81612a9a5760009050612b48565b8160018114612ab05760028114612aba57612ae9565b6001915050612b48565b60ff841115612acc57612acb611c1a565b5b8360020a915084821115612ae357612ae2611c1a565b5b50612b48565b5060208310610133831016604e8410600b8410161715612b1e5782820a905083811115612b1957612b18611c1a565b5b612b48565b612b2b8484846001612a29565b92509050818404811115612b4257612b41611c1a565b5b81810290505b9392505050565b600063ffffffff82169050919050565b6000612b6a826117dd565b9150612b7583612b4f565b9250612ba27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612a7c565b905092915050565b6000612bb5826117dd565b9150612bc0836117dd565b9250828202612bce816117dd565b91508282048414831517612be557612be4611c1a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c26826117dd565b9150612c31836117dd565b925082612c4157612c40612bec565b5b828204905092915050565b6000604082019050612c6160008301856114df565b612c6e602083018461156c565b9392505050565b7f5061727365206572726f723a20756e657870656374656420454f490000000000600082015250565b6000612cab601b8361181c565b9150612cb682612c75565b602082019050919050565b60006020820190508181036000830152612cda81612c9e565b905091905056fea2646970667358221220866cf318a5dc82ad4d0924dd335e6012632ebc4fc4ee6c9f2576522030c764ed64736f6c63430008140033",
  "libraries": {
    "AuroraSdk": "0xc34322f1f0b9140A52e669B269F6520459cb5342",
    "Codec": "0xB4404F32bEC247537F230C6657Fb34c7e6FB8a3c"
  },
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A simple oracle example deployed on an Aurora Silo which uses a Uniswap V2 pool (Trisolaris) as price feed from Aurora Mainnet. The result of the XCC call is returned in the callback from Aurora Mainnet to the Silo.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1078,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "pyth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)659"
      },
      {
        "astId": 1080,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1087,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "auroraMainnetAccountId",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1090,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "near",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(NEAR)1435_storage"
      },
      {
        "astId": 1092,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "wNEAR",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1094,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "priceFeedAddr",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1096,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "priceResult",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1098,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "targetPriceDecimals",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)456": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)659": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NEAR)1435_storage": {
        "encoding": "inplace",
        "label": "struct NEAR",
        "members": [
          {
            "astId": 1430,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1434,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "wNEAR",
            "offset": 1,
            "slot": "0",
            "type": "t_contract(IERC20)456"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}