{
  "address": "0xda6aE88D5bbafd35f00273BfeA7cCa0df0249a46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_auroraMainnetAccountId",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_wNEAR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_priceValidTimeRange",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLBACK_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auroraMainnetAccountId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        }
      ],
      "name": "getPythPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        }
      ],
      "name": "getPythPriceCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "near",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "contract IERC20",
          "name": "wNEAR",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nearRepresentitiveImplicitAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "priceMap",
      "outputs": [
        {
          "internalType": "int64",
          "name": "price",
          "type": "int64"
        },
        {
          "internalType": "uint64",
          "name": "conf",
          "type": "uint64"
        },
        {
          "internalType": "int32",
          "name": "expo",
          "type": "int32"
        },
        {
          "internalType": "uint256",
          "name": "publishTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "targetPriceDecimals",
          "type": "uint8"
        }
      ],
      "name": "readPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "targetPriceDecimals",
          "type": "uint8"
        }
      ],
      "name": "readPriceInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "targetPriceDecimals",
          "type": "uint8"
        }
      ],
      "name": "readPriceUnSafe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        }
      ],
      "name": "replaceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceValidTimeRange",
          "type": "uint256"
        }
      ],
      "name": "setPriceValidTimeRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNEAR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xce6790a6c0e30d97852c7894ebff28e7471f2c114db77d8fc060e749ea8e26d4",
  "receipt": {
    "to": null,
    "from": "0xCDD8c6b04044A3FA9Ba0500C469500CfCb66F0fC",
    "contractAddress": "0xda6aE88D5bbafd35f00273BfeA7cCa0df0249a46",
    "transactionIndex": 0,
    "gasUsed": "1948007",
    "logsBloom": "0x
    "blockHash": "0xb041624f2550c3953c3e8eea44058a06b942bc8f11bfafafb5e573bab69ce619",
    "transactionHash": "0xce6790a6c0e30d97852c7894ebff28e7471f2c114db77d8fc060e749ea8e26d4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 158845062,
        "transactionHash": "0xce6790a6c0e30d97852c7894ebff28e7471f2c114db77d8fc060e749ea8e26d4",
        "address": "0xda6aE88D5bbafd35f00273BfeA7cCa0df0249a46",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cdd8c6b04044a3fa9ba0500c469500cfcb66f0fc",
          "0x000000000000000000000000cdd8c6b04044a3fa9ba0500c469500cfcb66f0fc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb041624f2550c3953c3e8eea44058a06b942bc8f11bfafafb5e573bab69ce619"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 158845062,
        "transactionHash": "0xce6790a6c0e30d97852c7894ebff28e7471f2c114db77d8fc060e749ea8e26d4",
        "address": "0xda6aE88D5bbafd35f00273BfeA7cCa0df0249a46",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c",
          "0x0000000000000000000000000780b269d03021a809d8709660a0e560fa16d82b",
          "0x000000000000000000000000cdd8c6b04044a3fa9ba0500c469500cfcb66f0fc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb041624f2550c3953c3e8eea44058a06b942bc8f11bfafafb5e573bab69ce619"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 158845062,
        "transactionHash": "0xce6790a6c0e30d97852c7894ebff28e7471f2c114db77d8fc060e749ea8e26d4",
        "address": "0x4861825E75ab14553E5aF711EbbE6873d369d146",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000da6ae88d5bbafd35f00273bfea7cca0df0249a46",
          "0x000000000000000000000000516cded1d16af10cad47d6d49128e2eb7d27b372"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xb041624f2550c3953c3e8eea44058a06b942bc8f11bfafafb5e573bab69ce619"
      }
    ],
    "blockNumber": 158845062,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "aurora",
    "0x4861825e75ab14553e5af711ebbe6873d369d146",
    "0x74f09cb3c7e2A01865f424FD14F6dc9A14E3e94E",
    300
  ],
  "numDeployments": 2,
  "solcInputHash": "4efa580338a5abd6cd86c4c141386e63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_auroraMainnetAccountId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wNEAR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceValidTimeRange\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLBACK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auroraMainnetAccountId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"}],\"name\":\"getPythPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"}],\"name\":\"getPythPriceCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"near\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"wNEAR\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nearRepresentitiveImplicitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"priceMap\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"targetPriceDecimals\",\"type\":\"uint8\"}],\"name\":\"readPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"targetPriceDecimals\",\"type\":\"uint8\"}],\"name\":\"readPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"targetPriceDecimals\",\"type\":\"uint8\"}],\"name\":\"readPriceUnSafe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceValidTimeRange\",\"type\":\"uint256\"}],\"name\":\"setPriceValidTimeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNEAR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Pyth oracle deployed on an Aurora Testnet. Read Through XCC Pyth Price feed. The result of the XCC call is returned in the callback from Aurora Mainnet to the Silo.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PythOracle.sol\":\"PythOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"},\"contracts/PythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AuroraSdk, Codec, NEAR, PromiseCreateArgs, PromiseResultStatus, PromiseWithCallback, Borsh} from \\\"./aurora-sdk/AuroraSdk.sol\\\";\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n\\n/**\\n * Pyth oracle deployed on an Aurora Testnet. Read Through XCC Pyth Price feed.\\n * The result of the XCC call is returned in the callback from Aurora Mainnet to the Silo.\\n */\\n//contract PythOracle is Initializable, AccessControlUpgradeable {\\ncontract PythOracle is AccessControl {\\n    using AuroraSdk for NEAR;\\n    using AuroraSdk for PromiseCreateArgs;\\n    using AuroraSdk for PromiseWithCallback;\\n    using Codec for bytes;\\n\\n// When making a call to another NEAR contract, you must specify how much NEAR gas\\n// will be attached to the call (this is simlar to the `gas` argument in the EVM `call` opcode).\\n// The typical unit of has on Near is the teragas (Tgas), where 1 Tgas = 10^12 gas.\\n// For example, the block gas limit on NEAR is 1000 Tgas, and the transaction gas limit is 300 Tgas.\\n    \\n    uint64 private constant CALL_NEAR_GAS = 100_000_000_000_000;\\n    uint64 private constant CALLBACK_NEAR_GAS = 10_000_000_000_000;\\n\\n    IPyth pyth;\\n    uint fee;\\n    // Pyth Crypto.AURORA/USD\\t0x2f7c4f738d498585065a4b87b637069ec99474597da7f0ca349ba8ac3ba9cac5\\n\\n    bytes32 public constant CALLBACK_ROLE = keccak256(\\\"CALLBACK_ROLE\\\");\\n\\n    string public auroraMainnetAccountId;\\n    NEAR public near;\\n    address public wNEAR;\\n    address public priceFeedAddr;\\n\\n    // uint8 targetPriceDecimals;\\n    uint priceValidTimeRange;\\n\\n    mapping(bytes32 => PythStructs.Price) public priceMap;\\n\\n    constructor(\\n            string memory _auroraMainnetAccountId,\\n            IERC20 _wNEAR,\\n            address _priceFeedAddr,\\n            uint _priceValidTimeRange\\n    ) {\\n        // __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _grantRole(\\n            CALLBACK_ROLE,\\n            AuroraSdk.nearRepresentitiveImplicitAddress(address(this))\\n        );\\n        auroraMainnetAccountId = _auroraMainnetAccountId;\\n        near = AuroraSdk.initNear(_wNEAR);\\n        wNEAR = address(_wNEAR);\\n        pyth = IPyth(_priceFeedAddr);\\n        priceFeedAddr = _priceFeedAddr;\\n        priceValidTimeRange = _priceValidTimeRange;\\n    }\\n\\n    function getPythPrice(bytes32 pairId) public {\\n        // targetPriceDecimals = _targetPriceDecimals;\\n        bytes memory txData = abi.encodeWithSignature(\\n            \\\"getPrice(bytes32)\\\",\\n            pairId\\n        );\\n        PromiseCreateArgs memory callMainnetOracle = near.call(\\n            auroraMainnetAccountId,\\n            \\\"call\\\",\\n            abi.encodePacked(\\n                uint8(0),\\n                priceFeedAddr,\\n                uint256(0),\\n                txData.encode()\\n            ),\\n            0,\\n            CALL_NEAR_GAS\\n        );\\n        PromiseCreateArgs memory callback = near.auroraCall(\\n            address(this),\\n            //abi.encodePacked(this.getPythPriceCallback.selector, pairId),\\n            abi.encodeWithSignature(\\\"getPythPriceCallback(bytes32)\\\",pairId),\\n            0,\\n            CALLBACK_NEAR_GAS\\n        );\\n\\n        callMainnetOracle.then(callback).transact();\\n    }\\n\\n    // This function is not meant to be called by an externally owned account (EOA) on Aurora.\\n    // It should only be invoked as a callback from the main `getPythPrice` method above. This is\\n    // the reason why this function has separate access control from `getPythPrice`.\\n    function getPythPriceCallback(bytes32 pairId) public onlyRole(CALLBACK_ROLE) {\\n        if (\\n            AuroraSdk.promiseResult(0).status != PromiseResultStatus.Successful\\n        ) {\\n            revert(\\\"getPythPrice call failed-NEAR\\\");\\n        }\\n        bytes memory output = AuroraSdk.promiseResult(0).output;\\n        if (output[1] != hex\\\"00\\\") {\\n            revert(\\\"getPythPrice call failed-Aurora\\\");\\n        }\\n        bytes memory data = Borsh.decodeBytes(\\n            Borsh.from(BytesLib.slice(output, 2, output.length - 2))\\n        );\\n        priceMap[pairId] = abi.decode(data, (PythStructs.Price));\\n    }\\n\\n    function nearRepresentitiveImplicitAddress() public returns (address) {\\n        return AuroraSdk.nearRepresentitiveImplicitAddress(address(this));\\n    }\\n\\n    function readPriceUnSafe(bytes32 pairId, uint8 targetPriceDecimals) public view returns (uint256) {\\n        PythStructs.Price memory price = priceMap[pairId];\\n        return convertPriceToUint(price, targetPriceDecimals);\\n    }\\n    function readPrice(bytes32 pairId, uint8 targetPriceDecimals) public view returns (uint256) {\\n        PythStructs.Price memory price = priceMap[pairId];\\n        require(block.timestamp <= price.publishTime + priceValidTimeRange, \\\"Price is outdated\\\");\\n        return convertPriceToUint(price, targetPriceDecimals);\\n    } \\n    function readPriceInfo(bytes32 pairId, uint8 targetPriceDecimals) public view returns (uint256, uint256) {\\n        PythStructs.Price memory price = priceMap[pairId];\\n        require(block.timestamp <= price.publishTime + priceValidTimeRange, \\\"Price is outdated\\\");\\n        uint256 priceOut = convertPriceToUint(price, targetPriceDecimals);\\n        uint256 confOut = convertConfToUint(price, targetPriceDecimals);\\n        return (priceOut, confOut);\\n    }\\n\\n    // Set the price valid time range\\n    function setPriceValidTimeRange(uint _priceValidTimeRange) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_priceValidTimeRange > 0, \\\"Invalid priceValidTimeRange\\\");\\n        priceValidTimeRange = _priceValidTimeRange;\\n    }\\n\\n    // Replace admin role\\n    function replaceAdmin(address adminAddress) public {\\n        grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender); \\n    }\\n\\n    function convertPriceToUint(\\n        PythStructs.Price memory price,\\n        uint8 targetDecimals\\n    ) private pure returns (uint256) {\\n        if (price.price < 0 || price.expo > 0 || price.expo < -255) {\\n            revert(\\\"Invalid price\\\");\\n        }\\n\\n        uint8 priceDecimals = uint8(uint32(-1 * price.expo));\\n\\n        if (targetDecimals >= priceDecimals) {\\n            return\\n                uint(uint64(price.price)) *\\n                10 ** uint32(targetDecimals - priceDecimals);\\n        } else {\\n            return\\n                uint(uint64(price.price)) /\\n                10 ** uint32(priceDecimals - targetDecimals);\\n        }\\n    }\\n\\n    function convertConfToUint(\\n        PythStructs.Price memory price,\\n        uint8 targetDecimals\\n    ) private pure returns (uint256) {\\n        if (price.expo > 0 || price.expo < -255) {\\n            revert(\\\"Invalid expo\\\");\\n        }\\n\\n        uint8 confDecimals = uint8(uint32(-1 * price.expo));\\n\\n        if (targetDecimals >= confDecimals) {\\n            return\\n                uint(uint64(price.conf)) *\\n                10 ** uint32(targetDecimals - confDecimals);\\n        } else {\\n            return\\n                uint(uint64(price.conf)) /\\n                10 ** uint32(confDecimals - targetDecimals);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4ea0481a194041cf6147af4f03739d179a5a8db8fcd57a26f1b4e3336a83e582\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/AuroraSdk.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Codec.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Address of Cross Contract Call precompile in Aurora.\\n// It allows scheduling new promises to NEAR contracts.\\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the predecessor account id of the current call.\\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\\n// Address of current account id precompile in Aurora.\\n// It allows getting the current account id of the current call.\\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\\n// Addresss of promise result precompile in Aurora.\\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\\n// Address of wNEAR ERC20 on mainnet\\naddress constant wNEAR_MAINNET = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n\\nstruct NEAR {\\n    /// Wether the represenative NEAR account id for this contract\\n    /// has already been created or not. This is required since the\\n    /// first cross contract call requires attaching extra deposit\\n    /// to cover storage staking balance.\\n    bool initialized;\\n    /// Address of wNEAR token contract. It is used to charge the user\\n    /// required tokens for paying NEAR storage fees and attached balance\\n    /// for cross contract calls.\\n    IERC20 wNEAR;\\n}\\n\\nlibrary AuroraSdk {\\n    using Codec for bytes;\\n    using Codec for PromiseCreateArgs;\\n    using Codec for PromiseWithCallback;\\n    using Codec for Borsh.Data;\\n    using Borsh for Borsh.Data;\\n\\n    /// Create an instance of NEAR object. Requires the address at which\\n    /// wNEAR ERC20 token contract is deployed.\\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\\n        // Innovation silo doens't have wNEAR deployed, call fund_xcc_sub_account.\\n        NEAR memory near = NEAR(true, wNEAR);\\n        near.wNEAR.approve(XCC_PRECOMPILE, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        return near;\\n    }\\n\\n    /// Default configuration for mainnet.\\n    function mainnet() public returns (NEAR memory) {\\n        return initNear(IERC20(wNEAR_MAINNET));\\n    }\\n\\n    /// Compute NEAR represtentative account for the given Aurora address.\\n    /// This is the NEAR account created by the cross contract call precompile.\\n    function nearRepresentative(address account) public returns (string memory) {\\n        return addressSubAccount(account, currentAccountId());\\n    }\\n\\n    /// Prepends the given account ID with the given address (hex-encoded).\\n    function addressSubAccount(address account, string memory accountId) public pure returns (string memory) {\\n        return string(abi.encodePacked(Utils.bytesToHex(abi.encodePacked((bytes20(account)))), \\\".\\\", accountId));\\n    }\\n\\n    /// Compute implicity Aurora Address for the given NEAR account.\\n    function implicitAuroraAddress(string memory accountId) public pure returns (address) {\\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\\n    }\\n\\n    /// Compute the implicit Aurora address of the represenative NEAR account\\n    /// for the given Aurora address. Useful when a contract wants to call\\n    /// itself via a callback using cross contract call precompile.\\n    function nearRepresentitiveImplicitAddress(address account) public returns (address) {\\n        return implicitAuroraAddress(nearRepresentative(account));\\n    }\\n\\n    /// Get the promise result at the specified index.\\n    function promiseResult(uint256 index) public returns (PromiseResult memory result) {\\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n\\n        Borsh.Data memory borsh = Borsh.from(returnData);\\n\\n        uint32 length = borsh.decodeU32();\\n        require(index < length, \\\"Index out of bounds\\\");\\n\\n        for (uint256 i = 0; i < index; i++) {\\n            PromiseResultStatus status = PromiseResultStatus(uint8(borsh.decodeU8()));\\n            if (status == PromiseResultStatus.Successful) {\\n                borsh.skipBytes();\\n            }\\n        }\\n\\n        result.status = PromiseResultStatus(borsh.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = borsh.decodeBytes();\\n        }\\n    }\\n\\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\\n    function currentAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Get the NEAR account id of the predecessor contract.\\n    function predecessorAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Creates a base promise. This is not immediately scheduled for execution\\n    /// until transact is called. It can be combined with other promises using\\n    /// `then` combinator.\\n    ///\\n    /// Input is not checekd during promise creation. If it is invalid, the\\n    /// transaction will be scheduled either way, but it will fail during execution.\\n    function call(\\n        NEAR storage near,\\n        string memory targetAccountId,\\n        string memory method,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        /// Need to capture nearBalance before we modify it so that we don't\\n        /// double-charge the user for their initialization cost.\\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(targetAccountId, method, args, nearBalance, nearGas);\\n\\n        if (!near.initialized) {\\n            /// If the contract needs to be initialized, we need to attach\\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\\n            nearBalance += 2_000_000_000_000_000_000_000_000;\\n            near.initialized = true;\\n        }\\n\\n        if (nearBalance > 0) {\\n            near.wNEAR.transferFrom(msg.sender, address(this), uint256(nearBalance));\\n        }\\n\\n        return promise_args;\\n    }\\n\\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\\n    /// to a contract inside `Aurora`.\\n    function auroraCall(NEAR storage near, address target, bytes memory args, uint128 nearBalance, uint64 nearGas)\\n        public\\n        returns (PromiseCreateArgs memory)\\n    {\\n        return call(\\n            near,\\n            currentAccountId(),\\n            \\\"call\\\",\\n            abi.encodePacked(uint8(0), target, uint256(0), args.encode()),\\n            nearBalance,\\n            nearGas\\n        );\\n    }\\n\\n    /// Schedule a base promise to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore (i.e. should not be used with any further combinators).\\n    /// The promise also cannot be used to obtain any result of the call. A result can only be used\\n    /// by attaching a callback using `then` prior to calling `transact`.\\n    function transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    ///\\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\\n    /// https://github.com/ethereum/solidity/issues/869\\n    function transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\\n    /// A separate transaction to execute the scheduled promise is needed.\\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) =\\n            XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Create a promise with callback from two given promises.\\n    function then(PromiseCreateArgs memory base, PromiseCreateArgs memory callback)\\n        public\\n        pure\\n        returns (PromiseWithCallback memory)\\n    {\\n        return PromiseWithCallback(base, callback);\\n    }\\n}\\n\",\"keccak256\":\"0xf8da56169dc6fc3b104f52d579cc017eea21b2447d0bace1c03e69a28b64cf42\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(data.ptr + length <= data.end, \\\"Parse error: unexpected EOI\\\");\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length) internal pure returns (bytes32 res) {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length) internal pure returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length) internal view returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data) internal pure returns (bytes memory res) {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x75147926773f187bac6b2d50fa059c63e9ed3b1296b00aad61a28d37aa32d3ef\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            encode(bytes(nearPromise.targetAccountId)),\\n            encode(bytes(nearPromise.method)),\\n            encode(nearPromise.args),\\n            encodeU128(nearPromise.nearBalance),\\n            encodeU64(nearPromise.nearGas)\\n        );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(encode(nearPromise.base), encode(nearPromise.callback));\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseCreateArgs memory nearPromise, ExecutionMode mode)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(encode(mode), encode(PromiseArgsVariant.Create), encode(nearPromise));\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseWithCallback memory nearPromise, ExecutionMode mode)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(encode(mode), encode(PromiseArgsVariant.Callback), encode(nearPromise));\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data) public pure returns (PromiseResult memory result) {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(uint8(data.decodeU8()));\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3f54af89b9beb6efda2250b3ee70a63bf04cb7c576ed0649f79faf6e4eee1c7\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant\\n/// Basic NEAR promise\\n{\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    /// See https://nomicon.io/RuntimeSpec/Components/BindingsSpec/PromisesAPI\\n    /// for a complete description of what is possible.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode\\n/// Eager mode means that the promise WILL be executed in a single\\n/// NEAR transaction.\\n{\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus\\n/// This status should not be reachable.\\n{\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xb24942bea164dd922fc3016083072d72863e0ea7b15ed9dbe582bf8423a5bb41\",\"license\":\"CC-BY-1.0\"},\"contracts/aurora-sdk/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8)\\n            | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16)\\n            | ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32)\\n            | ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\\n        v = ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64)\\n            | ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length) internal pure returns (bytes memory res) {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end :=\\n                    add(res, and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length) internal view returns (bytes32 res) {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0x62dd74181dd1b2e30144db30f186bd590f9a21adc1a57c23e66d93a0cca09068\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200237138038062002371833981016040819052620000349162000311565b62000047600033620001ee565b620001ee565b5060405163a33598bf60e01b8152306004820152620000e5907f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c9073F3AAd56Deb1A6322a1b5D8E565499438bd63768f9063a33598bf90602401602060405180830381865af4158015620000bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000419190620003f4565b506003620000f48582620004aa565b50604051630daa036f60e21b81526001600160a01b038416600482015273F3AAd56Deb1A6322a1b5D8E565499438bd63768f906336a80dbc906024016040805180830381865af41580156200014d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000173919062000576565b8051600480546020909301516001600160a81b0319909316911515610100600160a81b031916919091176101006001600160a01b0393841602179055600580546001600160a01b03199081169583169590951790556001805485169390911692831790556006805490931690911790915560075550620005e0565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000293576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200024a3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000297565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002de57620002de6200029d565b604052919050565b6001600160a01b0381168114620002fc57600080fd5b50565b80516200030c81620002e6565b919050565b600080600080608085870312156200032857600080fd5b84516001600160401b03808211156200034057600080fd5b818701915087601f8301126200035557600080fd5b8151818111156200036a576200036a6200029d565b6020915062000382601f8201601f19168301620002b3565b81815289838386010111156200039757600080fd5b60005b82811015620003b75784810184015182820185015283016200039a565b5060008383830101528097505050620003d2818801620002ff565b94505050620003e460408601620002ff565b6060959095015193969295505050565b6000602082840312156200040757600080fd5b81516200041481620002e6565b9392505050565b600181811c908216806200043057607f821691505b6020821081036200045157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a557600081815260208120601f850160051c81016020861015620004805750805b601f850160051c820191505b81811015620004a1578281556001016200048c565b5050505b505050565b81516001600160401b03811115620004c657620004c66200029d565b620004de81620004d784546200041b565b8462000457565b602080601f831160018114620005165760008415620004fd5750858301515b600019600386901b1c1916600185901b178555620004a1565b600085815260208120601f198616915b82811015620005475788860151825594840194600190910190840162000526565b5085821015620005665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000604082840312156200058957600080fd5b604080519081016001600160401b0381118282101715620005ae57620005ae6200029d565b60405282518015158114620005c257600080fd5b81526020830151620005d481620002e6565b60208201529392505050565b611d8180620005f06000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063a217fddf116100b8578063ce3d448b1161007c578063ce3d448b14610334578063d547741f14610347578063d5f9ea2f1461035a578063e602af7614610362578063f6e252201461039e578063fa1dcfaf146103b157600080fd5b8063a217fddf14610270578063a51a681814610278578063c4f4face1461028d578063c8507cbd146102a0578063cb4a4b001461032157600080fd5b80632f16d6c8116100ff5780632f16d6c8146101fd5780632f2ff15d1461021057806336568abe14610223578063918d2f411461023657806391d148541461025d57600080fd5b806301ffc9a71461013c5780630283458814610164578063078d26051461018f578063248a9ca3146101a457806329b4cc5a146101d5575b600080fd5b61014f61014a366004611393565b6103c4565b60405190151581526020015b60405180910390f35b600554610177906001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b6101a261019d3660046113c4565b6103fb565b005b6101c76101b23660046113c4565b60009081526020819052604090206001015490565b60405190815260200161015b565b6101e86101e33660046113dd565b610461565b6040805192835260208301919091520161015b565b6101a261020b3660046113c4565b61052f565b6101a261021e366004611428565b6107e2565b6101a2610231366004611428565b61080d565b6101c77f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c81565b61014f61026b366004611428565b610845565b6101c7600081565b61028061086e565b60405161015b919061149d565b6101a261029b3660046114b0565b6108fc565b6102ea6102ae3660046113c4565b60086020526000908152604090208054600190910154600782900b916001600160401b03600160401b82041691600160801b90910460030b9084565b60405161015b949392919060079490940b84526001600160401b0392909216602084015260030b6040830152606082015260800190565b6101c761032f3660046113dd565b610915565b600654610177906001600160a01b031681565b6101a2610355366004611428565b61097b565b6101776109a0565b60045461037f9060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161015b565b6101a26103ac3660046113c4565b610a1b565b6101c76103bf3660046113dd565b610d5b565b60006001600160e01b03198216637965db0b60e01b14806103f557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061040681610e0b565b6000821161045b5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420707269636556616c696454696d6552616e6765000000000060448201526064015b60405180910390fd5b50600755565b600082815260086020908152604080832081516080810183528154600781810b83526001600160401b03600160401b83041695830195909552600160801b900460030b928101929092526001015460608201819052915483926104c491906114e3565b4211156105075760405162461bcd60e51b8152602060048201526011602482015270141c9a58d9481a5cc81bdd5d19185d1959607a1b6044820152606401610452565b60006105138286610e15565b905060006105218387610f0f565b919791965090945050505050565b7f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c61055981610e0b565b60016040516310cdb49360e01b81526000600482015273F3AAd56Deb1A6322a1b5D8E565499438bd63768f906310cdb49390602401600060405180830381865af41580156105ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d391908101906115f3565b5160028111156105e5576105e56114f6565b146106325760405162461bcd60e51b815260206004820152601d60248201527f6765745079746850726963652063616c6c206661696c65642d4e4541520000006044820152606401610452565b6040516310cdb49360e01b81526000600482018190529073F3AAd56Deb1A6322a1b5D8E565499438bd63768f906310cdb49390602401600060405180830381865af4158015610685573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ad91908101906115f3565b602001519050806001815181106106c6576106c6611676565b01602001516001600160f81b031916156107225760405162461bcd60e51b815260206004820152601f60248201527f6765745079746850726963652063616c6c206661696c65642d4175726f7261006044820152606401610452565b600061074c61074761074284600280875161073d919061168c565b610fed565b6110fa565b61112b565b90508080602001905181019061076291906116bb565b6000948552600860209081526040958690208251815492840151978401516001600160401b039182166fffffffffffffffffffffffffffffffff1990941693909317600160401b91909816029690961763ffffffff60801b1916600160801b63ffffffff9092169190910217855560600151600190940193909355505050565b6000828152602081905260409020600101546107fd81610e0b565b610807838361116b565b50505050565b6001600160a01b03811633146108365760405163334bd91960e11b815260040160405180910390fd5b61084082826111fd565b505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6003805461087b90611743565b80601f01602080910402602001604051908101604052809291908181526020018280546108a790611743565b80156108f45780601f106108c9576101008083540402835291602001916108f4565b820191906000526020600020905b8154815290600101906020018083116108d757829003601f168201915b505050505081565b6109076000826107e2565b61091260003361080d565b50565b600082815260086020908152604080832081516080810183528154600781900b82526001600160401b03600160401b82041694820194909452600160801b90930460030b918301919091526001015460608201526109738184610e15565b949350505050565b60008281526020819052604090206001015461099681610e0b565b61080783836111fd565b60405163a33598bf60e01b815230600482015260009073F3AAd56Deb1A6322a1b5D8E565499438bd63768f9063a33598bf90602401602060405180830381865af41580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a16919061177d565b905090565b600081604051602401610a3091815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166331d98b3f60e01b17905260065490516312496a1b60e01b815291925060009173F3AAd56Deb1A6322a1b5D8E565499438bd63768f9163925be54d9160049160039186916001600160a01b0316908290739Ff1Ef63DCB58E74e963cbd30558FFaD30A4D57a906312496a1b90610ac8908c90890161149d565b600060405180830381865af4158015610ae5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0d919081019061179a565b604051602001610b2094939291906117ce565b6040516020818303038152906040526000655af3107a40006040518663ffffffff1660e01b8152600401610b5895949392919061181d565b600060405180830381865af4158015610b75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9d91908101906119f8565b90506000600473F3AAd56Deb1A6322a1b5D8E565499438bd63768f6331b0e0e490913087604051602401610bd391815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166305e2dad960e31b1790525160e085901b6001600160e01b0319168152610c29939291906000906509184e72a00090600401611a2c565b600060405180830381865af4158015610c46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c6e91908101906119f8565b60405163987cbd7160e01b815290915073F3AAd56Deb1A6322a1b5D8E565499438bd63768f9063987cbd7190610caa9085908590600401611afb565b600060405180830381865af4158015610cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cef9190810190611b29565b60405163b4fa799360e01b815273F3AAd56Deb1A6322a1b5D8E565499438bd63768f9163b4fa799391610d259190600401611baa565b60006040518083038186803b158015610d3d57600080fd5b505af4158015610d51573d6000803e3d6000fd5b5050505050505050565b600082815260086020908152604080832081516080810183528154600781810b83526001600160401b03600160401b83041695830195909552600160801b900460030b92810192909252600101546060820181905291549091610dbe91906114e3565b421115610e015760405162461bcd60e51b8152602060048201526011602482015270141c9a58d9481a5cc81bdd5d19185d1959607a1b6044820152606401610452565b6109738184610e15565b6109128133611268565b600080836000015160070b1280610e3357506000836040015160030b135b80610e46575060fe19836040015160030b125b15610e835760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610452565b60008360400151600019610e979190611be3565b90508060ff168360ff1610610edb57610eb08184611c03565b610ebe9060ff16600a611d00565b8451610ed391906001600160401b0316611d12565b9150506103f5565b610ee58382611c03565b610ef39060ff16600a611d00565b8451610ed391906001600160401b0316611d29565b5092915050565b600080836040015160030b1380610f2e575060fe19836040015160030b125b15610f6a5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206578706f60a01b6044820152606401610452565b60008360400151600019610f7e9190611be3565b90508060ff168360ff1610610fbd57610f978184611c03565b610fa59060ff16600a611d00565b84602001516001600160401b0316610ed39190611d12565b610fc78382611c03565b610fd59060ff16600a611d00565b84602001516001600160401b0316610ed39190611d29565b606081610ffb81601f6114e3565b101561103a5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610452565b61104482846114e3565b845110156110885760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610452565b6060821580156110a757604051915060008252602082016040526110f1565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156110e05780518352602092830192016110c8565b5050858452601f01601f1916604052505b50949350505050565b60408051808201909152600080825260208201526020820181528161111d815190565b825101602083015250919050565b60606000611138836112a5565b63ffffffff16905061115381846112db90919063ffffffff16565b825161115f9082611332565b83519091019092525090565b60006111778383610845565b6111f5576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556111ad3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016103f5565b5060006103f5565b60006112098383610845565b156111f5576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016103f5565b6112728282610845565b6112a15760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610452565b5050565b60006103f56112b583600461137a565b60e881901c62ff00ff1663ff00ff0060d89290921c9190911617601081811c91901b1790565b60208201518251820111156112a15760405162461bcd60e51b815260206004820152601b60248201527f5061727365206572726f723a20756e657870656374656420454f4900000000006044820152606401610452565b606081156103f5576040519050601f19603f830116810180604052828252602082015b845181526020810190508181031561137257602085019450611355565b505092915050565b600061138683836112db565b5081518051910190915290565b6000602082840312156113a557600080fd5b81356001600160e01b0319811681146113bd57600080fd5b9392505050565b6000602082840312156113d657600080fd5b5035919050565b600080604083850312156113f057600080fd5b82359150602083013560ff8116811461140857600080fd5b809150509250929050565b6001600160a01b038116811461091257600080fd5b6000806040838503121561143b57600080fd5b82359150602083013561140881611413565b60005b83811015611468578181015183820152602001611450565b50506000910152565b6000815180845261148981602086016020860161144d565b601f01601f19169290920160200192915050565b6020815260006113bd6020830184611471565b6000602082840312156114c257600080fd5b81356113bd81611413565b634e487b7160e01b600052601160045260246000fd5b808201808211156103f5576103f56114cd565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156115445761154461150c565b60405290565b60405160a081016001600160401b03811182821017156115445761154461150c565b600082601f83011261157d57600080fd5b81516001600160401b03808211156115975761159761150c565b604051601f8301601f19908116603f011681019082821181831017156115bf576115bf61150c565b816040528381528660208588010111156115d857600080fd5b6115e984602083016020890161144d565b9695505050505050565b60006020828403121561160557600080fd5b81516001600160401b038082111561161c57600080fd5b908301906040828603121561163057600080fd5b611638611522565b82516003811061164757600080fd5b815260208301518281111561165b57600080fd5b6116678782860161156c565b60208301525095945050505050565b634e487b7160e01b600052603260045260246000fd5b818103818111156103f5576103f56114cd565b80516001600160401b03811681146116b657600080fd5b919050565b6000608082840312156116cd57600080fd5b604051608081018181106001600160401b03821117156116ef576116ef61150c565b6040528251600781900b811461170457600080fd5b81526117126020840161169f565b602082015260408301518060030b811461172b57600080fd5b60408201526060928301519281019290925250919050565b600181811c9082168061175757607f821691505b60208210810361177757634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561178f57600080fd5b81516113bd81611413565b6000602082840312156117ac57600080fd5b81516001600160401b038111156117c257600080fd5b6109738482850161156c565b60ff60f81b8560f81b1681526bffffffffffffffffffffffff198460601b1660018201528260158201526000825161180d81603585016020870161144d565b9190910160350195945050505050565b8581526000602060c0818401526000875481600182811c91508083168061184557607f831692505b858310810361186257634e487b7160e01b85526022600452602485fd5b60c0880183905260e088018180156118815760018114611897576118c2565b60ff198616825284151560051b820196506118c2565b60008e81526020902060005b868110156118bc578154848201529085019089016118a3565b83019750505b50505050505083810360408501526118eb81600481526318d85b1b60e21b602082015260400190565b91505082810360608401526119008187611471565b91505061191860808301856001600160801b03169052565b6001600160401b03831660a08301526115e9565b80516001600160801b03811681146116b657600080fd5b600060a0828403121561195557600080fd5b61195d61154a565b905081516001600160401b038082111561197657600080fd5b6119828583860161156c565b8352602084015191508082111561199857600080fd5b6119a48583860161156c565b602084015260408401519150808211156119bd57600080fd5b506119ca8482850161156c565b6040830152506119dc6060830161192c565b60608201526119ed6080830161169f565b608082015292915050565b600060208284031215611a0a57600080fd5b81516001600160401b03811115611a2057600080fd5b61097384828501611943565b8581526001600160a01b038516602082015260a060408201819052600090611a5690830186611471565b90506001600160801b03841660608301526001600160401b03831660808301529695505050505050565b6000815160a08452611a9560a0850182611471565b905060208301518482036020860152611aae8282611471565b91505060408301518482036040860152611ac88282611471565b9150506001600160801b0360608401511660608501526001600160401b0360808401511660808501528091505092915050565b604081526000611b0e6040830185611a80565b8281036020840152611b208185611a80565b95945050505050565b600060208284031215611b3b57600080fd5b81516001600160401b0380821115611b5257600080fd5b9083019060408286031215611b6657600080fd5b611b6e611522565b825182811115611b7d57600080fd5b611b8987828601611943565b825250602083015182811115611b9e57600080fd5b61166787828601611943565b602081526000825160406020840152611bc66060840182611a80565b90506020840151601f19848303016040850152611b208282611a80565b60008260030b8260030b028060030b9150808214610f0857610f086114cd565b60ff82811682821603908111156103f5576103f56114cd565b600181815b80851115611c57578160001904821115611c3d57611c3d6114cd565b80851615611c4a57918102915b93841c9390800290611c21565b509250929050565b600082611c6e575060016103f5565b81611c7b575060006103f5565b8160018114611c915760028114611c9b57611cb7565b60019150506103f5565b60ff841115611cac57611cac6114cd565b50506001821b6103f5565b5060208310610133831016604e8410600b8410161715611cda575081810a6103f5565b611ce48383611c1c565b8060001904821115611cf857611cf86114cd565b029392505050565b60006113bd63ffffffff841683611c5f565b80820281158282048414176103f5576103f56114cd565b600082611d4657634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122055e1d069c6c9659a375517589893ebee6fdd3850bf8db85dd00541b0ed246ee264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063a217fddf116100b8578063ce3d448b1161007c578063ce3d448b14610334578063d547741f14610347578063d5f9ea2f1461035a578063e602af7614610362578063f6e252201461039e578063fa1dcfaf146103b157600080fd5b8063a217fddf14610270578063a51a681814610278578063c4f4face1461028d578063c8507cbd146102a0578063cb4a4b001461032157600080fd5b80632f16d6c8116100ff5780632f16d6c8146101fd5780632f2ff15d1461021057806336568abe14610223578063918d2f411461023657806391d148541461025d57600080fd5b806301ffc9a71461013c5780630283458814610164578063078d26051461018f578063248a9ca3146101a457806329b4cc5a146101d5575b600080fd5b61014f61014a366004611393565b6103c4565b60405190151581526020015b60405180910390f35b600554610177906001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b6101a261019d3660046113c4565b6103fb565b005b6101c76101b23660046113c4565b60009081526020819052604090206001015490565b60405190815260200161015b565b6101e86101e33660046113dd565b610461565b6040805192835260208301919091520161015b565b6101a261020b3660046113c4565b61052f565b6101a261021e366004611428565b6107e2565b6101a2610231366004611428565b61080d565b6101c77f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c81565b61014f61026b366004611428565b610845565b6101c7600081565b61028061086e565b60405161015b919061149d565b6101a261029b3660046114b0565b6108fc565b6102ea6102ae3660046113c4565b60086020526000908152604090208054600190910154600782900b916001600160401b03600160401b82041691600160801b90910460030b9084565b60405161015b949392919060079490940b84526001600160401b0392909216602084015260030b6040830152606082015260800190565b6101c761032f3660046113dd565b610915565b600654610177906001600160a01b031681565b6101a2610355366004611428565b61097b565b6101776109a0565b60045461037f9060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161015b565b6101a26103ac3660046113c4565b610a1b565b6101c76103bf3660046113dd565b610d5b565b60006001600160e01b03198216637965db0b60e01b14806103f557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061040681610e0b565b6000821161045b5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420707269636556616c696454696d6552616e6765000000000060448201526064015b60405180910390fd5b50600755565b600082815260086020908152604080832081516080810183528154600781810b83526001600160401b03600160401b83041695830195909552600160801b900460030b928101929092526001015460608201819052915483926104c491906114e3565b4211156105075760405162461bcd60e51b8152602060048201526011602482015270141c9a58d9481a5cc81bdd5d19185d1959607a1b6044820152606401610452565b60006105138286610e15565b905060006105218387610f0f565b919791965090945050505050565b7f73f9a0f79d0de650ebb1c7d68b67125ab5d93ce97641ba33e5e1e4b5f481921c61055981610e0b565b60016040516310cdb49360e01b81526000600482015273__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__906310cdb49390602401600060405180830381865af41580156105ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d391908101906115f3565b5160028111156105e5576105e56114f6565b146106325760405162461bcd60e51b815260206004820152601d60248201527f6765745079746850726963652063616c6c206661696c65642d4e4541520000006044820152606401610452565b6040516310cdb49360e01b81526000600482018190529073__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__906310cdb49390602401600060405180830381865af4158015610685573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ad91908101906115f3565b602001519050806001815181106106c6576106c6611676565b01602001516001600160f81b031916156107225760405162461bcd60e51b815260206004820152601f60248201527f6765745079746850726963652063616c6c206661696c65642d4175726f7261006044820152606401610452565b600061074c61074761074284600280875161073d919061168c565b610fed565b6110fa565b61112b565b90508080602001905181019061076291906116bb565b6000948552600860209081526040958690208251815492840151978401516001600160401b039182166fffffffffffffffffffffffffffffffff1990941693909317600160401b91909816029690961763ffffffff60801b1916600160801b63ffffffff9092169190910217855560600151600190940193909355505050565b6000828152602081905260409020600101546107fd81610e0b565b610807838361116b565b50505050565b6001600160a01b03811633146108365760405163334bd91960e11b815260040160405180910390fd5b61084082826111fd565b505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6003805461087b90611743565b80601f01602080910402602001604051908101604052809291908181526020018280546108a790611743565b80156108f45780601f106108c9576101008083540402835291602001916108f4565b820191906000526020600020905b8154815290600101906020018083116108d757829003601f168201915b505050505081565b6109076000826107e2565b61091260003361080d565b50565b600082815260086020908152604080832081516080810183528154600781900b82526001600160401b03600160401b82041694820194909452600160801b90930460030b918301919091526001015460608201526109738184610e15565b949350505050565b60008281526020819052604090206001015461099681610e0b565b61080783836111fd565b60405163a33598bf60e01b815230600482015260009073__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__9063a33598bf90602401602060405180830381865af41580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a16919061177d565b905090565b600081604051602401610a3091815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166331d98b3f60e01b17905260065490516312496a1b60e01b815291925060009173__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__9163925be54d9160049160039186916001600160a01b031690829073__$b47451c9693ac4910bddd2ef01d769da1b$__906312496a1b90610ac8908c90890161149d565b600060405180830381865af4158015610ae5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0d919081019061179a565b604051602001610b2094939291906117ce565b6040516020818303038152906040526000655af3107a40006040518663ffffffff1660e01b8152600401610b5895949392919061181d565b600060405180830381865af4158015610b75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9d91908101906119f8565b90506000600473__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__6331b0e0e490913087604051602401610bd391815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166305e2dad960e31b1790525160e085901b6001600160e01b0319168152610c29939291906000906509184e72a00090600401611a2c565b600060405180830381865af4158015610c46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c6e91908101906119f8565b60405163987cbd7160e01b815290915073__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__9063987cbd7190610caa9085908590600401611afb565b600060405180830381865af4158015610cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cef9190810190611b29565b60405163b4fa799360e01b815273__$ff4a9d42f131ddb06cb1b98765cd1b5a91$__9163b4fa799391610d259190600401611baa565b60006040518083038186803b158015610d3d57600080fd5b505af4158015610d51573d6000803e3d6000fd5b5050505050505050565b600082815260086020908152604080832081516080810183528154600781810b83526001600160401b03600160401b83041695830195909552600160801b900460030b92810192909252600101546060820181905291549091610dbe91906114e3565b421115610e015760405162461bcd60e51b8152602060048201526011602482015270141c9a58d9481a5cc81bdd5d19185d1959607a1b6044820152606401610452565b6109738184610e15565b6109128133611268565b600080836000015160070b1280610e3357506000836040015160030b135b80610e46575060fe19836040015160030b125b15610e835760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610452565b60008360400151600019610e979190611be3565b90508060ff168360ff1610610edb57610eb08184611c03565b610ebe9060ff16600a611d00565b8451610ed391906001600160401b0316611d12565b9150506103f5565b610ee58382611c03565b610ef39060ff16600a611d00565b8451610ed391906001600160401b0316611d29565b5092915050565b600080836040015160030b1380610f2e575060fe19836040015160030b125b15610f6a5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964206578706f60a01b6044820152606401610452565b60008360400151600019610f7e9190611be3565b90508060ff168360ff1610610fbd57610f978184611c03565b610fa59060ff16600a611d00565b84602001516001600160401b0316610ed39190611d12565b610fc78382611c03565b610fd59060ff16600a611d00565b84602001516001600160401b0316610ed39190611d29565b606081610ffb81601f6114e3565b101561103a5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610452565b61104482846114e3565b845110156110885760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610452565b6060821580156110a757604051915060008252602082016040526110f1565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156110e05780518352602092830192016110c8565b5050858452601f01601f1916604052505b50949350505050565b60408051808201909152600080825260208201526020820181528161111d815190565b825101602083015250919050565b60606000611138836112a5565b63ffffffff16905061115381846112db90919063ffffffff16565b825161115f9082611332565b83519091019092525090565b60006111778383610845565b6111f5576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556111ad3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016103f5565b5060006103f5565b60006112098383610845565b156111f5576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016103f5565b6112728282610845565b6112a15760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610452565b5050565b60006103f56112b583600461137a565b60e881901c62ff00ff1663ff00ff0060d89290921c9190911617601081811c91901b1790565b60208201518251820111156112a15760405162461bcd60e51b815260206004820152601b60248201527f5061727365206572726f723a20756e657870656374656420454f4900000000006044820152606401610452565b606081156103f5576040519050601f19603f830116810180604052828252602082015b845181526020810190508181031561137257602085019450611355565b505092915050565b600061138683836112db565b5081518051910190915290565b6000602082840312156113a557600080fd5b81356001600160e01b0319811681146113bd57600080fd5b9392505050565b6000602082840312156113d657600080fd5b5035919050565b600080604083850312156113f057600080fd5b82359150602083013560ff8116811461140857600080fd5b809150509250929050565b6001600160a01b038116811461091257600080fd5b6000806040838503121561143b57600080fd5b82359150602083013561140881611413565b60005b83811015611468578181015183820152602001611450565b50506000910152565b6000815180845261148981602086016020860161144d565b601f01601f19169290920160200192915050565b6020815260006113bd6020830184611471565b6000602082840312156114c257600080fd5b81356113bd81611413565b634e487b7160e01b600052601160045260246000fd5b808201808211156103f5576103f56114cd565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156115445761154461150c565b60405290565b60405160a081016001600160401b03811182821017156115445761154461150c565b600082601f83011261157d57600080fd5b81516001600160401b03808211156115975761159761150c565b604051601f8301601f19908116603f011681019082821181831017156115bf576115bf61150c565b816040528381528660208588010111156115d857600080fd5b6115e984602083016020890161144d565b9695505050505050565b60006020828403121561160557600080fd5b81516001600160401b038082111561161c57600080fd5b908301906040828603121561163057600080fd5b611638611522565b82516003811061164757600080fd5b815260208301518281111561165b57600080fd5b6116678782860161156c565b60208301525095945050505050565b634e487b7160e01b600052603260045260246000fd5b818103818111156103f5576103f56114cd565b80516001600160401b03811681146116b657600080fd5b919050565b6000608082840312156116cd57600080fd5b604051608081018181106001600160401b03821117156116ef576116ef61150c565b6040528251600781900b811461170457600080fd5b81526117126020840161169f565b602082015260408301518060030b811461172b57600080fd5b60408201526060928301519281019290925250919050565b600181811c9082168061175757607f821691505b60208210810361177757634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561178f57600080fd5b81516113bd81611413565b6000602082840312156117ac57600080fd5b81516001600160401b038111156117c257600080fd5b6109738482850161156c565b60ff60f81b8560f81b1681526bffffffffffffffffffffffff198460601b1660018201528260158201526000825161180d81603585016020870161144d565b9190910160350195945050505050565b8581526000602060c0818401526000875481600182811c91508083168061184557607f831692505b858310810361186257634e487b7160e01b85526022600452602485fd5b60c0880183905260e088018180156118815760018114611897576118c2565b60ff198616825284151560051b820196506118c2565b60008e81526020902060005b868110156118bc578154848201529085019089016118a3565b83019750505b50505050505083810360408501526118eb81600481526318d85b1b60e21b602082015260400190565b91505082810360608401526119008187611471565b91505061191860808301856001600160801b03169052565b6001600160401b03831660a08301526115e9565b80516001600160801b03811681146116b657600080fd5b600060a0828403121561195557600080fd5b61195d61154a565b905081516001600160401b038082111561197657600080fd5b6119828583860161156c565b8352602084015191508082111561199857600080fd5b6119a48583860161156c565b602084015260408401519150808211156119bd57600080fd5b506119ca8482850161156c565b6040830152506119dc6060830161192c565b60608201526119ed6080830161169f565b608082015292915050565b600060208284031215611a0a57600080fd5b81516001600160401b03811115611a2057600080fd5b61097384828501611943565b8581526001600160a01b038516602082015260a060408201819052600090611a5690830186611471565b90506001600160801b03841660608301526001600160401b03831660808301529695505050505050565b6000815160a08452611a9560a0850182611471565b905060208301518482036020860152611aae8282611471565b91505060408301518482036040860152611ac88282611471565b9150506001600160801b0360608401511660608501526001600160401b0360808401511660808501528091505092915050565b604081526000611b0e6040830185611a80565b8281036020840152611b208185611a80565b95945050505050565b600060208284031215611b3b57600080fd5b81516001600160401b0380821115611b5257600080fd5b9083019060408286031215611b6657600080fd5b611b6e611522565b825182811115611b7d57600080fd5b611b8987828601611943565b825250602083015182811115611b9e57600080fd5b61166787828601611943565b602081526000825160406020840152611bc66060840182611a80565b90506020840151601f19848303016040850152611b208282611a80565b60008260030b8260030b028060030b9150808214610f0857610f086114cd565b60ff82811682821603908111156103f5576103f56114cd565b600181815b80851115611c57578160001904821115611c3d57611c3d6114cd565b80851615611c4a57918102915b93841c9390800290611c21565b509250929050565b600082611c6e575060016103f5565b81611c7b575060006103f5565b8160018114611c915760028114611c9b57611cb7565b60019150506103f5565b60ff841115611cac57611cac6114cd565b50506001821b6103f5565b5060208310610133831016604e8410600b8410161715611cda575081810a6103f5565b611ce48383611c1c565b8060001904821115611cf857611cf86114cd565b029392505050565b60006113bd63ffffffff841683611c5f565b80820281158282048414176103f5576103f56114cd565b600082611d4657634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122055e1d069c6c9659a375517589893ebee6fdd3850bf8db85dd00541b0ed246ee264736f6c63430008140033",
  "libraries": {
    "AuroraSdk": "0xF3AAd56Deb1A6322a1b5D8E565499438bd63768f",
    "Codec": "0x9Ff1Ef63DCB58E74e963cbd30558FFaD30A4D57a"
  },
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Pyth oracle deployed on an Aurora Testnet. Read Through XCC Pyth Price feed. The result of the XCC call is returned in the callback from Aurora Mainnet to the Silo.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1078,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "pyth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)659"
      },
      {
        "astId": 1080,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1087,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "auroraMainnetAccountId",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1090,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "near",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(NEAR)1663_storage"
      },
      {
        "astId": 1092,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "wNEAR",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1094,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "priceFeedAddr",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1096,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "priceValidTimeRange",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1101,
        "contract": "contracts/PythOracle.sol:PythOracle",
        "label": "priceMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Price)692_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)456": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)659": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Price)692_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PythStructs.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)692_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NEAR)1663_storage": {
        "encoding": "inplace",
        "label": "struct NEAR",
        "members": [
          {
            "astId": 1658,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1662,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "wNEAR",
            "offset": 1,
            "slot": "0",
            "type": "t_contract(IERC20)456"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Price)692_storage": {
        "encoding": "inplace",
        "label": "struct PythStructs.Price",
        "members": [
          {
            "astId": 685,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 687,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "conf",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 689,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "expo",
            "offset": 16,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 691,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "publishTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/PythOracle.sol:PythOracle",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}