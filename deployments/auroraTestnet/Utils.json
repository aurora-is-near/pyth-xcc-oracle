{
  "address": "0x8ad1217d2de89275493aEf5a2440c3a5e4015C5A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "buffer",
          "type": "bytes"
        }
      ],
      "name": "bytesToHex",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x78f83be66bfbe87865735c940b6c0708229f9534a52d203f4ee944822cafa56f",
  "receipt": {
    "to": null,
    "from": "0xCDD8c6b04044A3FA9Ba0500C469500CfCb66F0fC",
    "contractAddress": "0x8ad1217d2de89275493aEf5a2440c3a5e4015C5A",
    "transactionIndex": 0,
    "gasUsed": "275528",
    "logsBloom": "0x
    "blockHash": "0xa327027a512d14f2fed781cb4f61ef0284a2b2c3af3b41bf20c638184f585862",
    "transactionHash": "0x78f83be66bfbe87865735c940b6c0708229f9534a52d203f4ee944822cafa56f",
    "logs": [],
    "blockNumber": 158815092,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b19efaa856b0e99e3f570a4a82735fac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"buffer\",\"type\":\"bytes\"}],\"name\":\"bytesToHex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bytesToHex(bytes)\":{\"notice\":\"Convert array of bytes to hexadecimal string. https://ethereum.stackexchange.com/a/126928/45323\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aurora-sdk/Utils.sol\":\"Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/aurora-sdk/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\npragma solidity ^0.8.20;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8)\\n            | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16)\\n            | ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32)\\n            | ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\\n        v = ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64)\\n            | ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length) internal pure returns (bytes memory res) {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end :=\\n                    add(res, and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length) internal view returns (bytes32 res) {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0x62dd74181dd1b2e30144db30f186bd590f9a21adc1a57c23e66d93a0cca09068\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x61040461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063451d89fa1461003a575b600080fd5b61004d61004836600461021c565b610063565b60405161005a91906102cd565b60405180910390f35b60606000825160026100759190610331565b67ffffffffffffffff81111561008d5761008d610206565b6040519080825280601f01601f1916602001820160405280156100b7576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b84518110156101fd578182518683815181106101035761010361034e565b0160200151610115919060f81c61037a565b815181106101255761012561034e565b01602001516001600160f81b03191683610140836002610331565b815181106101505761015061034e565b60200101906001600160f81b031916908160001a90535081825186838151811061017c5761017c61034e565b016020015161018e919060f81c61038e565b8151811061019e5761019e61034e565b01602001516001600160f81b031916836101b9836002610331565b6101c49060016103a2565b815181106101d4576101d461034e565b60200101906001600160f81b031916908160001a905350806101f5816103b5565b9150506100e5565b50909392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561022e57600080fd5b813567ffffffffffffffff8082111561024657600080fd5b818401915084601f83011261025a57600080fd5b81358181111561026c5761026c610206565b604051601f8201601f19908116603f0116810190838211818310171561029457610294610206565b816040528281528760208487010111156102ad57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156102fa578581018301518582016040015282016102de565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103485761034861031b565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261038957610389610364565b500490565b60008261039d5761039d610364565b500690565b808201808211156103485761034861031b565b6000600182016103c7576103c761031b565b506001019056fea264697066735822122050618cad964b77232071dab886f4dbec78ae6d2774ebb2e7723d66760c2c758964736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063451d89fa1461003a575b600080fd5b61004d61004836600461021c565b610063565b60405161005a91906102cd565b60405180910390f35b60606000825160026100759190610331565b67ffffffffffffffff81111561008d5761008d610206565b6040519080825280601f01601f1916602001820160405280156100b7576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b84518110156101fd578182518683815181106101035761010361034e565b0160200151610115919060f81c61037a565b815181106101255761012561034e565b01602001516001600160f81b03191683610140836002610331565b815181106101505761015061034e565b60200101906001600160f81b031916908160001a90535081825186838151811061017c5761017c61034e565b016020015161018e919060f81c61038e565b8151811061019e5761019e61034e565b01602001516001600160f81b031916836101b9836002610331565b6101c49060016103a2565b815181106101d4576101d461034e565b60200101906001600160f81b031916908160001a905350806101f5816103b5565b9150506100e5565b50909392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561022e57600080fd5b813567ffffffffffffffff8082111561024657600080fd5b818401915084601f83011261025a57600080fd5b81358181111561026c5761026c610206565b604051601f8201601f19908116603f0116810190838211818310171561029457610294610206565b816040528281528760208487010111156102ad57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156102fa578581018301518582016040015282016102de565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103485761034861031b565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261038957610389610364565b500490565b60008261039d5761039d610364565b500690565b808201808211156103485761034861031b565b6000600182016103c7576103c761031b565b506001019056fea264697066735822122050618cad964b77232071dab886f4dbec78ae6d2774ebb2e7723d66760c2c758964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bytesToHex(bytes)": {
        "notice": "Convert array of bytes to hexadecimal string. https://ethereum.stackexchange.com/a/126928/45323"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}